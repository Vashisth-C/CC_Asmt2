State 61 conflicts: 1 shift/reduce


Grammar

    0 $accept: start $end

    1 start: PROGRAM IDENTIFIER SEMICOLON variable_declaration program_declaration PERIOD

    2 variable_declaration: VAR variable_list
    3                     | ε

    4 variable_list: variable_line
    5              | variable_line variable_list

    6 variable_line: left_side_vars COLON rigth_side_type SEMICOLON

    7 left_side_vars: IDENTIFIER
    8               | IDENTIFIER COMMA left_side_vars

    9 rigth_side_type: DATATYPE
   10                | ARRAY OPEN_BRACKET CONSTANT RANGE_DOTS CONSTANT CLOSE_BRACKET OF DATATYPE

   11 program_declaration: BEGIN_TAG statements END
   12                    | BEGIN_TAG END

   13 statements: statementline
   14           | statementline statements

   15 statementline: WRITE OPEN_PARANTHESIS possible_writes CLOSE_PARANTHESIS SEMICOLON
   16              | READ OPEN_PARANTHESIS possible_reads CLOSE_PARANTHESIS SEMICOLON
   17              | IDENTIFIER ASSIGNMENT_OP arith_expression SEMICOLON
   18              | IF condition THEN program_declaration ELSE program_declaration SEMICOLON
   19              | IF condition THEN program_declaration SEMICOLON
   20              | FOR IDENTIFIER ASSIGNMENT_OP arith_expression TO arith_expression DO program_declaration SEMICOLON
   21              | FOR IDENTIFIER ASSIGNMENT_OP arith_expression DOWNTO arith_expression DO program_declaration SEMICOLON
   22              | WHILE condition DO program_declaration SEMICOLON

   23 condition: conditional_head
   24          | unit

   25 conditional_head: relational_exp
   26                 | conditionals

   27 conditionals: condtional_unit
   28             | relational_exp BOOLEAN_OP conditionals
   29             | relational_exp BOOLEAN_OP unit_x
   30             | unit_x BOOLEAN_OP conditionals
   31             | unit_x BOOLEAN_OP unit_x
   32             | BOOLEAN_OP_NOT conditionals
   33             | OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS

   34 condtional_unit: BOOLEAN_OP_NOT unit_x

   35 relational_exp: arith_expression RELATIONAL_OP arith_expression
   36               | OPEN_PARANTHESIS relational_exp CLOSE_PARANTHESIS

   37 possible_writes: possible_write_values
   38                | ε

   39 possible_write_values: left_side_vars
   40                      | STRING_CONSTANT
   41                      | STRING_CONSTANT COMMA possible_write_values
   42                      | IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET

   43 possible_reads: IDENTIFIER
   44               | IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET

   45 arith_expression: unit_2
   46                 | unit
   47                 | OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   48                 | arith_expression ARITHEMATIC_OP arith_expression
   49                 | arith_expression ARITHEMATIC_OP_MINUS arith_expression

   50 unit_x: unit
   51       | OPEN_PARANTHESIS unit CLOSE_PARANTHESIS

   52 unit: IDENTIFIER
   53     | IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   54     | ARITHEMATIC_OP_MINUS arith_expression

   55 unit_2: CONSTANT


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER (258) 1 7 8 17 20 21 42 43 44 52 53
    CONSTANT (259) 10 55
    ARITHEMATIC_OP (260) 48
    RELATIONAL_OP (261) 35
    ASSIGNMENT_OP (262) 17 20 21
    SEMICOLON (263) 1 6 15 16 17 18 19 20 21 22
    COMMA (264) 8 41
    BOOLEAN_OP (265) 28 29 30 31
    OPEN_BRACKET (266) 10 42 44 53
    OPEN_PARANTHESIS (267) 15 16 33 36 47 51
    CLOSE_BRACKET (268) 10 42 44 53
    CLOSE_PARANTHESIS (269) 15 16 33 36 47 51
    PERIOD (270) 1
    RANGE_DOTS (271) 10
    IF (272) 18 19
    WHILE (273) 22
    ELSE (274) 18
    FOR (275) 20 21
    DO (276) 20 21 22
    BEGIN_TAG (277) 11 12
    END (278) 11 12
    WRITE (279) 15
    READ (280) 16
    PROGRAM (281) 1
    STRING_CONSTANT (282) 40 41
    DOWNTO (283) 21
    TO (284) 20
    OF (285) 10
    COLON (286) 6
    VAR (287) 2
    DATATYPE (288) 9 10
    ARRAY (289) 10
    THEN (290) 18 19
    BOOLEAN_OP_NOT (291) 32 34
    ARITHEMATIC_OP_MINUS (292) 49 54


Nonterminals, with rules where they appear

    $accept (38)
        on left: 0
    start (39)
        on left: 1
        on right: 0
    variable_declaration (40)
        on left: 2 3
        on right: 1
    variable_list (41)
        on left: 4 5
        on right: 2 5
    variable_line (42)
        on left: 6
        on right: 4 5
    left_side_vars (43)
        on left: 7 8
        on right: 6 8 39
    rigth_side_type (44)
        on left: 9 10
        on right: 6
    program_declaration (45)
        on left: 11 12
        on right: 1 18 19 20 21 22
    statements (46)
        on left: 13 14
        on right: 11 14
    statementline (47)
        on left: 15 16 17 18 19 20 21 22
        on right: 13 14
    condition (48)
        on left: 23 24
        on right: 18 19 22
    conditional_head (49)
        on left: 25 26
        on right: 23
    conditionals (50)
        on left: 27 28 29 30 31 32 33
        on right: 26 28 30 32 33
    condtional_unit (51)
        on left: 34
        on right: 27
    relational_exp (52)
        on left: 35 36
        on right: 25 28 29 36
    possible_writes (53)
        on left: 37 38
        on right: 15
    possible_write_values (54)
        on left: 39 40 41 42
        on right: 37 41
    possible_reads (55)
        on left: 43 44
        on right: 16
    arith_expression (56)
        on left: 45 46 47 48 49
        on right: 17 20 21 35 42 44 47 48 49 53 54
    unit_x (57)
        on left: 50 51
        on right: 29 30 31 34
    unit (58)
        on left: 52 53 54
        on right: 24 46 50 51
    unit_2 (59)
        on left: 55
        on right: 45


State 0

    0 $accept: • start $end
    1 start: • PROGRAM IDENTIFIER SEMICOLON variable_declaration program_declaration PERIOD

    PROGRAM  shift, and go to state 1

    start  go to state 2


State 1

    1 start: PROGRAM • IDENTIFIER SEMICOLON variable_declaration program_declaration PERIOD

    IDENTIFIER  shift, and go to state 3


State 2

    0 $accept: start • $end

    $end  shift, and go to state 4


State 3

    1 start: PROGRAM IDENTIFIER • SEMICOLON variable_declaration program_declaration PERIOD

    SEMICOLON  shift, and go to state 5


State 4

    0 $accept: start $end •

    $default  accept


State 5

    1 start: PROGRAM IDENTIFIER SEMICOLON • variable_declaration program_declaration PERIOD
    2 variable_declaration: • VAR variable_list
    3                     | ε •  [BEGIN_TAG]

    VAR  shift, and go to state 6

    $default  reduce using rule 3 (variable_declaration)

    variable_declaration  go to state 7


State 6

    2 variable_declaration: VAR • variable_list
    4 variable_list: • variable_line
    5              | • variable_line variable_list
    6 variable_line: • left_side_vars COLON rigth_side_type SEMICOLON
    7 left_side_vars: • IDENTIFIER
    8               | • IDENTIFIER COMMA left_side_vars

    IDENTIFIER  shift, and go to state 8

    variable_list   go to state 9
    variable_line   go to state 10
    left_side_vars  go to state 11


State 7

    1 start: PROGRAM IDENTIFIER SEMICOLON variable_declaration • program_declaration PERIOD
   11 program_declaration: • BEGIN_TAG statements END
   12                    | • BEGIN_TAG END

    BEGIN_TAG  shift, and go to state 12

    program_declaration  go to state 13


State 8

    7 left_side_vars: IDENTIFIER •  [CLOSE_PARANTHESIS, COLON]
    8               | IDENTIFIER • COMMA left_side_vars

    COMMA  shift, and go to state 14

    $default  reduce using rule 7 (left_side_vars)


State 9

    2 variable_declaration: VAR variable_list •

    $default  reduce using rule 2 (variable_declaration)


State 10

    4 variable_list: • variable_line
    4              | variable_line •  [BEGIN_TAG]
    5              | • variable_line variable_list
    5              | variable_line • variable_list
    6 variable_line: • left_side_vars COLON rigth_side_type SEMICOLON
    7 left_side_vars: • IDENTIFIER
    8               | • IDENTIFIER COMMA left_side_vars

    IDENTIFIER  shift, and go to state 8

    $default  reduce using rule 4 (variable_list)

    variable_list   go to state 15
    variable_line   go to state 10
    left_side_vars  go to state 11


State 11

    6 variable_line: left_side_vars • COLON rigth_side_type SEMICOLON

    COLON  shift, and go to state 16


State 12

   11 program_declaration: BEGIN_TAG • statements END
   12                    | BEGIN_TAG • END
   13 statements: • statementline
   14           | • statementline statements
   15 statementline: • WRITE OPEN_PARANTHESIS possible_writes CLOSE_PARANTHESIS SEMICOLON
   16              | • READ OPEN_PARANTHESIS possible_reads CLOSE_PARANTHESIS SEMICOLON
   17              | • IDENTIFIER ASSIGNMENT_OP arith_expression SEMICOLON
   18              | • IF condition THEN program_declaration ELSE program_declaration SEMICOLON
   19              | • IF condition THEN program_declaration SEMICOLON
   20              | • FOR IDENTIFIER ASSIGNMENT_OP arith_expression TO arith_expression DO program_declaration SEMICOLON
   21              | • FOR IDENTIFIER ASSIGNMENT_OP arith_expression DOWNTO arith_expression DO program_declaration SEMICOLON
   22              | • WHILE condition DO program_declaration SEMICOLON

    IDENTIFIER  shift, and go to state 17
    IF          shift, and go to state 18
    WHILE       shift, and go to state 19
    FOR         shift, and go to state 20
    END         shift, and go to state 21
    WRITE       shift, and go to state 22
    READ        shift, and go to state 23

    statements     go to state 24
    statementline  go to state 25


State 13

    1 start: PROGRAM IDENTIFIER SEMICOLON variable_declaration program_declaration • PERIOD

    PERIOD  shift, and go to state 26


State 14

    7 left_side_vars: • IDENTIFIER
    8               | • IDENTIFIER COMMA left_side_vars
    8               | IDENTIFIER COMMA • left_side_vars

    IDENTIFIER  shift, and go to state 8

    left_side_vars  go to state 27


State 15

    5 variable_list: variable_line variable_list •

    $default  reduce using rule 5 (variable_list)


State 16

    6 variable_line: left_side_vars COLON • rigth_side_type SEMICOLON
    9 rigth_side_type: • DATATYPE
   10                | • ARRAY OPEN_BRACKET CONSTANT RANGE_DOTS CONSTANT CLOSE_BRACKET OF DATATYPE

    DATATYPE  shift, and go to state 28
    ARRAY     shift, and go to state 29

    rigth_side_type  go to state 30


State 17

   17 statementline: IDENTIFIER • ASSIGNMENT_OP arith_expression SEMICOLON

    ASSIGNMENT_OP  shift, and go to state 31


State 18

   18 statementline: IF • condition THEN program_declaration ELSE program_declaration SEMICOLON
   19              | IF • condition THEN program_declaration SEMICOLON
   23 condition: • conditional_head
   24          | • unit
   25 conditional_head: • relational_exp
   26                 | • conditionals
   27 conditionals: • condtional_unit
   28             | • relational_exp BOOLEAN_OP conditionals
   29             | • relational_exp BOOLEAN_OP unit_x
   30             | • unit_x BOOLEAN_OP conditionals
   31             | • unit_x BOOLEAN_OP unit_x
   32             | • BOOLEAN_OP_NOT conditionals
   33             | • OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS
   34 condtional_unit: • BOOLEAN_OP_NOT unit_x
   35 relational_exp: • arith_expression RELATIONAL_OP arith_expression
   36               | • OPEN_PARANTHESIS relational_exp CLOSE_PARANTHESIS
   45 arith_expression: • unit_2
   46                 | • unit
   47                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   48                 | • arith_expression ARITHEMATIC_OP arith_expression
   49                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   50 unit_x: • unit
   51       | • OPEN_PARANTHESIS unit CLOSE_PARANTHESIS
   52 unit: • IDENTIFIER
   53     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   54     | • ARITHEMATIC_OP_MINUS arith_expression
   55 unit_2: • CONSTANT

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 34
    BOOLEAN_OP_NOT        shift, and go to state 35
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    condition         go to state 37
    conditional_head  go to state 38
    conditionals      go to state 39
    condtional_unit   go to state 40
    relational_exp    go to state 41
    arith_expression  go to state 42
    unit_x            go to state 43
    unit              go to state 44
    unit_2            go to state 45


State 19

   22 statementline: WHILE • condition DO program_declaration SEMICOLON
   23 condition: • conditional_head
   24          | • unit
   25 conditional_head: • relational_exp
   26                 | • conditionals
   27 conditionals: • condtional_unit
   28             | • relational_exp BOOLEAN_OP conditionals
   29             | • relational_exp BOOLEAN_OP unit_x
   30             | • unit_x BOOLEAN_OP conditionals
   31             | • unit_x BOOLEAN_OP unit_x
   32             | • BOOLEAN_OP_NOT conditionals
   33             | • OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS
   34 condtional_unit: • BOOLEAN_OP_NOT unit_x
   35 relational_exp: • arith_expression RELATIONAL_OP arith_expression
   36               | • OPEN_PARANTHESIS relational_exp CLOSE_PARANTHESIS
   45 arith_expression: • unit_2
   46                 | • unit
   47                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   48                 | • arith_expression ARITHEMATIC_OP arith_expression
   49                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   50 unit_x: • unit
   51       | • OPEN_PARANTHESIS unit CLOSE_PARANTHESIS
   52 unit: • IDENTIFIER
   53     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   54     | • ARITHEMATIC_OP_MINUS arith_expression
   55 unit_2: • CONSTANT

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 34
    BOOLEAN_OP_NOT        shift, and go to state 35
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    condition         go to state 46
    conditional_head  go to state 38
    conditionals      go to state 39
    condtional_unit   go to state 40
    relational_exp    go to state 41
    arith_expression  go to state 42
    unit_x            go to state 43
    unit              go to state 44
    unit_2            go to state 45


State 20

   20 statementline: FOR • IDENTIFIER ASSIGNMENT_OP arith_expression TO arith_expression DO program_declaration SEMICOLON
   21              | FOR • IDENTIFIER ASSIGNMENT_OP arith_expression DOWNTO arith_expression DO program_declaration SEMICOLON

    IDENTIFIER  shift, and go to state 47


State 21

   12 program_declaration: BEGIN_TAG END •

    $default  reduce using rule 12 (program_declaration)


State 22

   15 statementline: WRITE • OPEN_PARANTHESIS possible_writes CLOSE_PARANTHESIS SEMICOLON

    OPEN_PARANTHESIS  shift, and go to state 48


State 23

   16 statementline: READ • OPEN_PARANTHESIS possible_reads CLOSE_PARANTHESIS SEMICOLON

    OPEN_PARANTHESIS  shift, and go to state 49


State 24

   11 program_declaration: BEGIN_TAG statements • END

    END  shift, and go to state 50


State 25

   13 statements: • statementline
   13           | statementline •  [END]
   14           | • statementline statements
   14           | statementline • statements
   15 statementline: • WRITE OPEN_PARANTHESIS possible_writes CLOSE_PARANTHESIS SEMICOLON
   16              | • READ OPEN_PARANTHESIS possible_reads CLOSE_PARANTHESIS SEMICOLON
   17              | • IDENTIFIER ASSIGNMENT_OP arith_expression SEMICOLON
   18              | • IF condition THEN program_declaration ELSE program_declaration SEMICOLON
   19              | • IF condition THEN program_declaration SEMICOLON
   20              | • FOR IDENTIFIER ASSIGNMENT_OP arith_expression TO arith_expression DO program_declaration SEMICOLON
   21              | • FOR IDENTIFIER ASSIGNMENT_OP arith_expression DOWNTO arith_expression DO program_declaration SEMICOLON
   22              | • WHILE condition DO program_declaration SEMICOLON

    IDENTIFIER  shift, and go to state 17
    IF          shift, and go to state 18
    WHILE       shift, and go to state 19
    FOR         shift, and go to state 20
    WRITE       shift, and go to state 22
    READ        shift, and go to state 23

    $default  reduce using rule 13 (statements)

    statements     go to state 51
    statementline  go to state 25


State 26

    1 start: PROGRAM IDENTIFIER SEMICOLON variable_declaration program_declaration PERIOD •

    $default  reduce using rule 1 (start)


State 27

    8 left_side_vars: IDENTIFIER COMMA left_side_vars •

    $default  reduce using rule 8 (left_side_vars)


State 28

    9 rigth_side_type: DATATYPE •

    $default  reduce using rule 9 (rigth_side_type)


State 29

   10 rigth_side_type: ARRAY • OPEN_BRACKET CONSTANT RANGE_DOTS CONSTANT CLOSE_BRACKET OF DATATYPE

    OPEN_BRACKET  shift, and go to state 52


State 30

    6 variable_line: left_side_vars COLON rigth_side_type • SEMICOLON

    SEMICOLON  shift, and go to state 53


State 31

   17 statementline: IDENTIFIER ASSIGNMENT_OP • arith_expression SEMICOLON
   45 arith_expression: • unit_2
   46                 | • unit
   47                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   48                 | • arith_expression ARITHEMATIC_OP arith_expression
   49                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   52 unit: • IDENTIFIER
   53     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   54     | • ARITHEMATIC_OP_MINUS arith_expression
   55 unit_2: • CONSTANT

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 54
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    arith_expression  go to state 55
    unit              go to state 56
    unit_2            go to state 45


State 32

   52 unit: IDENTIFIER •  [ARITHEMATIC_OP, RELATIONAL_OP, SEMICOLON, BOOLEAN_OP, CLOSE_BRACKET, CLOSE_PARANTHESIS, DO, DOWNTO, TO, THEN, ARITHEMATIC_OP_MINUS]
   53     | IDENTIFIER • OPEN_BRACKET arith_expression CLOSE_BRACKET

    OPEN_BRACKET  shift, and go to state 57

    $default  reduce using rule 52 (unit)


State 33

   55 unit_2: CONSTANT •

    $default  reduce using rule 55 (unit_2)


State 34

   27 conditionals: • condtional_unit
   28             | • relational_exp BOOLEAN_OP conditionals
   29             | • relational_exp BOOLEAN_OP unit_x
   30             | • unit_x BOOLEAN_OP conditionals
   31             | • unit_x BOOLEAN_OP unit_x
   32             | • BOOLEAN_OP_NOT conditionals
   33             | • OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS
   33             | OPEN_PARANTHESIS • conditionals CLOSE_PARANTHESIS
   34 condtional_unit: • BOOLEAN_OP_NOT unit_x
   35 relational_exp: • arith_expression RELATIONAL_OP arith_expression
   36               | • OPEN_PARANTHESIS relational_exp CLOSE_PARANTHESIS
   36               | OPEN_PARANTHESIS • relational_exp CLOSE_PARANTHESIS
   45 arith_expression: • unit_2
   46                 | • unit
   47                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   47                 | OPEN_PARANTHESIS • arith_expression CLOSE_PARANTHESIS
   48                 | • arith_expression ARITHEMATIC_OP arith_expression
   49                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   50 unit_x: • unit
   51       | • OPEN_PARANTHESIS unit CLOSE_PARANTHESIS
   51       | OPEN_PARANTHESIS • unit CLOSE_PARANTHESIS
   52 unit: • IDENTIFIER
   53     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   54     | • ARITHEMATIC_OP_MINUS arith_expression
   55 unit_2: • CONSTANT

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 34
    BOOLEAN_OP_NOT        shift, and go to state 35
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    conditionals      go to state 58
    condtional_unit   go to state 40
    relational_exp    go to state 59
    arith_expression  go to state 60
    unit_x            go to state 43
    unit              go to state 61
    unit_2            go to state 45


State 35

   27 conditionals: • condtional_unit
   28             | • relational_exp BOOLEAN_OP conditionals
   29             | • relational_exp BOOLEAN_OP unit_x
   30             | • unit_x BOOLEAN_OP conditionals
   31             | • unit_x BOOLEAN_OP unit_x
   32             | • BOOLEAN_OP_NOT conditionals
   32             | BOOLEAN_OP_NOT • conditionals
   33             | • OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS
   34 condtional_unit: • BOOLEAN_OP_NOT unit_x
   34                | BOOLEAN_OP_NOT • unit_x
   35 relational_exp: • arith_expression RELATIONAL_OP arith_expression
   36               | • OPEN_PARANTHESIS relational_exp CLOSE_PARANTHESIS
   45 arith_expression: • unit_2
   46                 | • unit
   47                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   48                 | • arith_expression ARITHEMATIC_OP arith_expression
   49                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   50 unit_x: • unit
   51       | • OPEN_PARANTHESIS unit CLOSE_PARANTHESIS
   52 unit: • IDENTIFIER
   53     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   54     | • ARITHEMATIC_OP_MINUS arith_expression
   55 unit_2: • CONSTANT

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 34
    BOOLEAN_OP_NOT        shift, and go to state 35
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    conditionals      go to state 62
    condtional_unit   go to state 40
    relational_exp    go to state 63
    arith_expression  go to state 42
    unit_x            go to state 64
    unit              go to state 65
    unit_2            go to state 45


State 36

   45 arith_expression: • unit_2
   46                 | • unit
   47                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   48                 | • arith_expression ARITHEMATIC_OP arith_expression
   49                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   52 unit: • IDENTIFIER
   53     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   54     | • ARITHEMATIC_OP_MINUS arith_expression
   54     | ARITHEMATIC_OP_MINUS • arith_expression
   55 unit_2: • CONSTANT

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 54
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    arith_expression  go to state 66
    unit              go to state 56
    unit_2            go to state 45


State 37

   18 statementline: IF condition • THEN program_declaration ELSE program_declaration SEMICOLON
   19              | IF condition • THEN program_declaration SEMICOLON

    THEN  shift, and go to state 67


State 38

   23 condition: conditional_head •

    $default  reduce using rule 23 (condition)


State 39

   26 conditional_head: conditionals •

    $default  reduce using rule 26 (conditional_head)


State 40

   27 conditionals: condtional_unit •

    $default  reduce using rule 27 (conditionals)


State 41

   25 conditional_head: relational_exp •  [DO, THEN]
   28 conditionals: relational_exp • BOOLEAN_OP conditionals
   29             | relational_exp • BOOLEAN_OP unit_x

    BOOLEAN_OP  shift, and go to state 68

    $default  reduce using rule 25 (conditional_head)


State 42

   35 relational_exp: arith_expression • RELATIONAL_OP arith_expression
   48 arith_expression: arith_expression • ARITHEMATIC_OP arith_expression
   49                 | arith_expression • ARITHEMATIC_OP_MINUS arith_expression

    ARITHEMATIC_OP        shift, and go to state 69
    RELATIONAL_OP         shift, and go to state 70
    ARITHEMATIC_OP_MINUS  shift, and go to state 71


State 43

   30 conditionals: unit_x • BOOLEAN_OP conditionals
   31             | unit_x • BOOLEAN_OP unit_x

    BOOLEAN_OP  shift, and go to state 72


State 44

   24 condition: unit •  [DO, THEN]
   46 arith_expression: unit •  [ARITHEMATIC_OP, RELATIONAL_OP, ARITHEMATIC_OP_MINUS]
   50 unit_x: unit •  [BOOLEAN_OP]

    BOOLEAN_OP  reduce using rule 50 (unit_x)
    DO          reduce using rule 24 (condition)
    THEN        reduce using rule 24 (condition)
    $default    reduce using rule 46 (arith_expression)


State 45

   45 arith_expression: unit_2 •

    $default  reduce using rule 45 (arith_expression)


State 46

   22 statementline: WHILE condition • DO program_declaration SEMICOLON

    DO  shift, and go to state 73


State 47

   20 statementline: FOR IDENTIFIER • ASSIGNMENT_OP arith_expression TO arith_expression DO program_declaration SEMICOLON
   21              | FOR IDENTIFIER • ASSIGNMENT_OP arith_expression DOWNTO arith_expression DO program_declaration SEMICOLON

    ASSIGNMENT_OP  shift, and go to state 74


State 48

    7 left_side_vars: • IDENTIFIER
    8               | • IDENTIFIER COMMA left_side_vars
   15 statementline: WRITE OPEN_PARANTHESIS • possible_writes CLOSE_PARANTHESIS SEMICOLON
   37 possible_writes: • possible_write_values
   38                | ε •  [CLOSE_PARANTHESIS]
   39 possible_write_values: • left_side_vars
   40                      | • STRING_CONSTANT
   41                      | • STRING_CONSTANT COMMA possible_write_values
   42                      | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET

    IDENTIFIER       shift, and go to state 75
    STRING_CONSTANT  shift, and go to state 76

    $default  reduce using rule 38 (possible_writes)

    left_side_vars         go to state 77
    possible_writes        go to state 78
    possible_write_values  go to state 79


State 49

   16 statementline: READ OPEN_PARANTHESIS • possible_reads CLOSE_PARANTHESIS SEMICOLON
   43 possible_reads: • IDENTIFIER
   44               | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET

    IDENTIFIER  shift, and go to state 80

    possible_reads  go to state 81


State 50

   11 program_declaration: BEGIN_TAG statements END •

    $default  reduce using rule 11 (program_declaration)


State 51

   14 statements: statementline statements •

    $default  reduce using rule 14 (statements)


State 52

   10 rigth_side_type: ARRAY OPEN_BRACKET • CONSTANT RANGE_DOTS CONSTANT CLOSE_BRACKET OF DATATYPE

    CONSTANT  shift, and go to state 82


State 53

    6 variable_line: left_side_vars COLON rigth_side_type SEMICOLON •

    $default  reduce using rule 6 (variable_line)


State 54

   45 arith_expression: • unit_2
   46                 | • unit
   47                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   47                 | OPEN_PARANTHESIS • arith_expression CLOSE_PARANTHESIS
   48                 | • arith_expression ARITHEMATIC_OP arith_expression
   49                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   52 unit: • IDENTIFIER
   53     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   54     | • ARITHEMATIC_OP_MINUS arith_expression
   55 unit_2: • CONSTANT

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 54
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    arith_expression  go to state 83
    unit              go to state 56
    unit_2            go to state 45


State 55

   17 statementline: IDENTIFIER ASSIGNMENT_OP arith_expression • SEMICOLON
   48 arith_expression: arith_expression • ARITHEMATIC_OP arith_expression
   49                 | arith_expression • ARITHEMATIC_OP_MINUS arith_expression

    ARITHEMATIC_OP        shift, and go to state 69
    SEMICOLON             shift, and go to state 84
    ARITHEMATIC_OP_MINUS  shift, and go to state 71


State 56

   46 arith_expression: unit •

    $default  reduce using rule 46 (arith_expression)


State 57

   45 arith_expression: • unit_2
   46                 | • unit
   47                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   48                 | • arith_expression ARITHEMATIC_OP arith_expression
   49                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   52 unit: • IDENTIFIER
   53     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   53     | IDENTIFIER OPEN_BRACKET • arith_expression CLOSE_BRACKET
   54     | • ARITHEMATIC_OP_MINUS arith_expression
   55 unit_2: • CONSTANT

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 54
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    arith_expression  go to state 85
    unit              go to state 56
    unit_2            go to state 45


State 58

   33 conditionals: OPEN_PARANTHESIS conditionals • CLOSE_PARANTHESIS

    CLOSE_PARANTHESIS  shift, and go to state 86


State 59

   28 conditionals: relational_exp • BOOLEAN_OP conditionals
   29             | relational_exp • BOOLEAN_OP unit_x
   36 relational_exp: OPEN_PARANTHESIS relational_exp • CLOSE_PARANTHESIS

    BOOLEAN_OP         shift, and go to state 68
    CLOSE_PARANTHESIS  shift, and go to state 87


State 60

   35 relational_exp: arith_expression • RELATIONAL_OP arith_expression
   47 arith_expression: OPEN_PARANTHESIS arith_expression • CLOSE_PARANTHESIS
   48                 | arith_expression • ARITHEMATIC_OP arith_expression
   49                 | arith_expression • ARITHEMATIC_OP_MINUS arith_expression

    ARITHEMATIC_OP        shift, and go to state 69
    RELATIONAL_OP         shift, and go to state 70
    CLOSE_PARANTHESIS     shift, and go to state 88
    ARITHEMATIC_OP_MINUS  shift, and go to state 71


State 61

   46 arith_expression: unit •  [ARITHEMATIC_OP, RELATIONAL_OP, CLOSE_PARANTHESIS, ARITHEMATIC_OP_MINUS]
   50 unit_x: unit •  [BOOLEAN_OP]
   51       | OPEN_PARANTHESIS unit • CLOSE_PARANTHESIS

    CLOSE_PARANTHESIS  shift, and go to state 89

    BOOLEAN_OP         reduce using rule 50 (unit_x)
    CLOSE_PARANTHESIS  [reduce using rule 46 (arith_expression)]
    $default           reduce using rule 46 (arith_expression)

    shift/reduce conflict on token CLOSE_PARANTHESIS:
       46 arith_expression: unit •
       51 unit_x: OPEN_PARANTHESIS unit • CLOSE_PARANTHESIS
      First example: PROGRAM IDENTIFIER SEMICOLON variable_declaration BEGIN_TAG IF OPEN_PARANTHESIS unit • CLOSE_PARANTHESIS BOOLEAN_OP conditionals THEN program_declaration ELSE program_declaration SEMICOLON END PERIOD $end
      Shift derivation
        $accept
        ↳ 0: start                                                                                                                                                                                                                                            $end
             ↳ 1: PROGRAM IDENTIFIER SEMICOLON variable_declaration program_declaration                                                                                                                                                                PERIOD
                                                                    ↳ 11: BEGIN_TAG statementline                                                                                                                                                  END
                                                                                    ↳ 18: IF condition                                                                                 THEN program_declaration ELSE program_declaration SEMICOLON
                                                                                             ↳ 23: conditional_head
                                                                                                   ↳ 26: conditionals
                                                                                                         ↳ 30: unit_x                                          BOOLEAN_OP conditionals
                                                                                                               ↳ 51: OPEN_PARANTHESIS unit • CLOSE_PARANTHESIS
      Second example: PROGRAM IDENTIFIER SEMICOLON variable_declaration BEGIN_TAG IF OPEN_PARANTHESIS unit • CLOSE_PARANTHESIS RELATIONAL_OP arith_expression THEN program_declaration ELSE program_declaration SEMICOLON END PERIOD $end
      Reduce derivation
        $accept
        ↳ 0: start                                                                                                                                                                                                                                                                   $end
             ↳ 1: PROGRAM IDENTIFIER SEMICOLON variable_declaration program_declaration                                                                                                                                                                                       PERIOD
                                                                    ↳ 11: BEGIN_TAG statements                                                                                                                                                                            END
                                                                                    ↳ 13: statementline
                                                                                          ↳ 18: IF condition                                                                                                  THEN program_declaration ELSE program_declaration SEMICOLON
                                                                                                   ↳ 23: conditional_head
                                                                                                         ↳ 25: relational_exp
                                                                                                               ↳ 35: arith_expression                                          RELATIONAL_OP arith_expression
                                                                                                                     ↳ 47: OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
                                                                                                                                            ↳ 46: unit •



State 62

   32 conditionals: BOOLEAN_OP_NOT conditionals •

    $default  reduce using rule 32 (conditionals)


State 63

   28 conditionals: relational_exp • BOOLEAN_OP conditionals
   29             | relational_exp • BOOLEAN_OP unit_x

    BOOLEAN_OP  shift, and go to state 68


State 64

   30 conditionals: unit_x • BOOLEAN_OP conditionals
   31             | unit_x • BOOLEAN_OP unit_x
   34 condtional_unit: BOOLEAN_OP_NOT unit_x •  [CLOSE_PARANTHESIS, DO, THEN]

    BOOLEAN_OP  shift, and go to state 72

    $default  reduce using rule 34 (condtional_unit)


State 65

   46 arith_expression: unit •  [ARITHEMATIC_OP, RELATIONAL_OP, ARITHEMATIC_OP_MINUS]
   50 unit_x: unit •  [BOOLEAN_OP, CLOSE_PARANTHESIS, DO, THEN]

    ARITHEMATIC_OP        reduce using rule 46 (arith_expression)
    RELATIONAL_OP         reduce using rule 46 (arith_expression)
    ARITHEMATIC_OP_MINUS  reduce using rule 46 (arith_expression)
    $default              reduce using rule 50 (unit_x)


State 66

   48 arith_expression: arith_expression • ARITHEMATIC_OP arith_expression
   49                 | arith_expression • ARITHEMATIC_OP_MINUS arith_expression
   54 unit: ARITHEMATIC_OP_MINUS arith_expression •  [ARITHEMATIC_OP, RELATIONAL_OP, SEMICOLON, BOOLEAN_OP, CLOSE_BRACKET, CLOSE_PARANTHESIS, DO, DOWNTO, TO, THEN, ARITHEMATIC_OP_MINUS]

    $default  reduce using rule 54 (unit)

    Conflict between rule 54 and token ARITHEMATIC_OP resolved as reduce (ARITHEMATIC_OP < ARITHEMATIC_OP_MINUS).
    Conflict between rule 54 and token ARITHEMATIC_OP_MINUS resolved as reduce (%left ARITHEMATIC_OP_MINUS).


State 67

   11 program_declaration: • BEGIN_TAG statements END
   12                    | • BEGIN_TAG END
   18 statementline: IF condition THEN • program_declaration ELSE program_declaration SEMICOLON
   19              | IF condition THEN • program_declaration SEMICOLON

    BEGIN_TAG  shift, and go to state 12

    program_declaration  go to state 90


State 68

   27 conditionals: • condtional_unit
   28             | • relational_exp BOOLEAN_OP conditionals
   28             | relational_exp BOOLEAN_OP • conditionals
   29             | • relational_exp BOOLEAN_OP unit_x
   29             | relational_exp BOOLEAN_OP • unit_x
   30             | • unit_x BOOLEAN_OP conditionals
   31             | • unit_x BOOLEAN_OP unit_x
   32             | • BOOLEAN_OP_NOT conditionals
   33             | • OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS
   34 condtional_unit: • BOOLEAN_OP_NOT unit_x
   35 relational_exp: • arith_expression RELATIONAL_OP arith_expression
   36               | • OPEN_PARANTHESIS relational_exp CLOSE_PARANTHESIS
   45 arith_expression: • unit_2
   46                 | • unit
   47                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   48                 | • arith_expression ARITHEMATIC_OP arith_expression
   49                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   50 unit_x: • unit
   51       | • OPEN_PARANTHESIS unit CLOSE_PARANTHESIS
   52 unit: • IDENTIFIER
   53     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   54     | • ARITHEMATIC_OP_MINUS arith_expression
   55 unit_2: • CONSTANT

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 34
    BOOLEAN_OP_NOT        shift, and go to state 35
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    conditionals      go to state 91
    condtional_unit   go to state 40
    relational_exp    go to state 63
    arith_expression  go to state 42
    unit_x            go to state 92
    unit              go to state 65
    unit_2            go to state 45


State 69

   45 arith_expression: • unit_2
   46                 | • unit
   47                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   48                 | • arith_expression ARITHEMATIC_OP arith_expression
   48                 | arith_expression ARITHEMATIC_OP • arith_expression
   49                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   52 unit: • IDENTIFIER
   53     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   54     | • ARITHEMATIC_OP_MINUS arith_expression
   55 unit_2: • CONSTANT

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 54
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    arith_expression  go to state 93
    unit              go to state 56
    unit_2            go to state 45


State 70

   35 relational_exp: arith_expression RELATIONAL_OP • arith_expression
   45 arith_expression: • unit_2
   46                 | • unit
   47                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   48                 | • arith_expression ARITHEMATIC_OP arith_expression
   49                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   52 unit: • IDENTIFIER
   53     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   54     | • ARITHEMATIC_OP_MINUS arith_expression
   55 unit_2: • CONSTANT

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 54
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    arith_expression  go to state 94
    unit              go to state 56
    unit_2            go to state 45


State 71

   45 arith_expression: • unit_2
   46                 | • unit
   47                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   48                 | • arith_expression ARITHEMATIC_OP arith_expression
   49                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   49                 | arith_expression ARITHEMATIC_OP_MINUS • arith_expression
   52 unit: • IDENTIFIER
   53     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   54     | • ARITHEMATIC_OP_MINUS arith_expression
   55 unit_2: • CONSTANT

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 54
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    arith_expression  go to state 95
    unit              go to state 56
    unit_2            go to state 45


State 72

   27 conditionals: • condtional_unit
   28             | • relational_exp BOOLEAN_OP conditionals
   29             | • relational_exp BOOLEAN_OP unit_x
   30             | • unit_x BOOLEAN_OP conditionals
   30             | unit_x BOOLEAN_OP • conditionals
   31             | • unit_x BOOLEAN_OP unit_x
   31             | unit_x BOOLEAN_OP • unit_x
   32             | • BOOLEAN_OP_NOT conditionals
   33             | • OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS
   34 condtional_unit: • BOOLEAN_OP_NOT unit_x
   35 relational_exp: • arith_expression RELATIONAL_OP arith_expression
   36               | • OPEN_PARANTHESIS relational_exp CLOSE_PARANTHESIS
   45 arith_expression: • unit_2
   46                 | • unit
   47                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   48                 | • arith_expression ARITHEMATIC_OP arith_expression
   49                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   50 unit_x: • unit
   51       | • OPEN_PARANTHESIS unit CLOSE_PARANTHESIS
   52 unit: • IDENTIFIER
   53     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   54     | • ARITHEMATIC_OP_MINUS arith_expression
   55 unit_2: • CONSTANT

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 34
    BOOLEAN_OP_NOT        shift, and go to state 35
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    conditionals      go to state 96
    condtional_unit   go to state 40
    relational_exp    go to state 63
    arith_expression  go to state 42
    unit_x            go to state 97
    unit              go to state 65
    unit_2            go to state 45


State 73

   11 program_declaration: • BEGIN_TAG statements END
   12                    | • BEGIN_TAG END
   22 statementline: WHILE condition DO • program_declaration SEMICOLON

    BEGIN_TAG  shift, and go to state 12

    program_declaration  go to state 98


State 74

   20 statementline: FOR IDENTIFIER ASSIGNMENT_OP • arith_expression TO arith_expression DO program_declaration SEMICOLON
   21              | FOR IDENTIFIER ASSIGNMENT_OP • arith_expression DOWNTO arith_expression DO program_declaration SEMICOLON
   45 arith_expression: • unit_2
   46                 | • unit
   47                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   48                 | • arith_expression ARITHEMATIC_OP arith_expression
   49                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   52 unit: • IDENTIFIER
   53     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   54     | • ARITHEMATIC_OP_MINUS arith_expression
   55 unit_2: • CONSTANT

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 54
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    arith_expression  go to state 99
    unit              go to state 56
    unit_2            go to state 45


State 75

    7 left_side_vars: IDENTIFIER •  [CLOSE_PARANTHESIS]
    8               | IDENTIFIER • COMMA left_side_vars
   42 possible_write_values: IDENTIFIER • OPEN_BRACKET arith_expression CLOSE_BRACKET

    COMMA         shift, and go to state 14
    OPEN_BRACKET  shift, and go to state 100

    $default  reduce using rule 7 (left_side_vars)


State 76

   40 possible_write_values: STRING_CONSTANT •  [CLOSE_PARANTHESIS]
   41                      | STRING_CONSTANT • COMMA possible_write_values

    COMMA  shift, and go to state 101

    $default  reduce using rule 40 (possible_write_values)


State 77

   39 possible_write_values: left_side_vars •

    $default  reduce using rule 39 (possible_write_values)


State 78

   15 statementline: WRITE OPEN_PARANTHESIS possible_writes • CLOSE_PARANTHESIS SEMICOLON

    CLOSE_PARANTHESIS  shift, and go to state 102


State 79

   37 possible_writes: possible_write_values •

    $default  reduce using rule 37 (possible_writes)


State 80

   43 possible_reads: IDENTIFIER •  [CLOSE_PARANTHESIS]
   44               | IDENTIFIER • OPEN_BRACKET arith_expression CLOSE_BRACKET

    OPEN_BRACKET  shift, and go to state 103

    $default  reduce using rule 43 (possible_reads)


State 81

   16 statementline: READ OPEN_PARANTHESIS possible_reads • CLOSE_PARANTHESIS SEMICOLON

    CLOSE_PARANTHESIS  shift, and go to state 104


State 82

   10 rigth_side_type: ARRAY OPEN_BRACKET CONSTANT • RANGE_DOTS CONSTANT CLOSE_BRACKET OF DATATYPE

    RANGE_DOTS  shift, and go to state 105


State 83

   47 arith_expression: OPEN_PARANTHESIS arith_expression • CLOSE_PARANTHESIS
   48                 | arith_expression • ARITHEMATIC_OP arith_expression
   49                 | arith_expression • ARITHEMATIC_OP_MINUS arith_expression

    ARITHEMATIC_OP        shift, and go to state 69
    CLOSE_PARANTHESIS     shift, and go to state 88
    ARITHEMATIC_OP_MINUS  shift, and go to state 71


State 84

   17 statementline: IDENTIFIER ASSIGNMENT_OP arith_expression SEMICOLON •

    $default  reduce using rule 17 (statementline)


State 85

   48 arith_expression: arith_expression • ARITHEMATIC_OP arith_expression
   49                 | arith_expression • ARITHEMATIC_OP_MINUS arith_expression
   53 unit: IDENTIFIER OPEN_BRACKET arith_expression • CLOSE_BRACKET

    ARITHEMATIC_OP        shift, and go to state 69
    CLOSE_BRACKET         shift, and go to state 106
    ARITHEMATIC_OP_MINUS  shift, and go to state 71


State 86

   33 conditionals: OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS •

    $default  reduce using rule 33 (conditionals)


State 87

   36 relational_exp: OPEN_PARANTHESIS relational_exp CLOSE_PARANTHESIS •

    $default  reduce using rule 36 (relational_exp)


State 88

   47 arith_expression: OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS •

    $default  reduce using rule 47 (arith_expression)


State 89

   51 unit_x: OPEN_PARANTHESIS unit CLOSE_PARANTHESIS •

    $default  reduce using rule 51 (unit_x)


State 90

   18 statementline: IF condition THEN program_declaration • ELSE program_declaration SEMICOLON
   19              | IF condition THEN program_declaration • SEMICOLON

    SEMICOLON  shift, and go to state 107
    ELSE       shift, and go to state 108


State 91

   28 conditionals: relational_exp BOOLEAN_OP conditionals •

    $default  reduce using rule 28 (conditionals)


State 92

   29 conditionals: relational_exp BOOLEAN_OP unit_x •  [CLOSE_PARANTHESIS, DO, THEN]
   30             | unit_x • BOOLEAN_OP conditionals
   31             | unit_x • BOOLEAN_OP unit_x

    BOOLEAN_OP  shift, and go to state 72

    $default  reduce using rule 29 (conditionals)


State 93

   48 arith_expression: arith_expression • ARITHEMATIC_OP arith_expression
   48                 | arith_expression ARITHEMATIC_OP arith_expression •  [ARITHEMATIC_OP, RELATIONAL_OP, SEMICOLON, BOOLEAN_OP, CLOSE_BRACKET, CLOSE_PARANTHESIS, DO, DOWNTO, TO, THEN]
   49                 | arith_expression • ARITHEMATIC_OP_MINUS arith_expression

    ARITHEMATIC_OP_MINUS  shift, and go to state 71

    $default  reduce using rule 48 (arith_expression)

    Conflict between rule 48 and token ARITHEMATIC_OP resolved as reduce (%left ARITHEMATIC_OP).
    Conflict between rule 48 and token ARITHEMATIC_OP_MINUS resolved as shift (ARITHEMATIC_OP < ARITHEMATIC_OP_MINUS).


State 94

   35 relational_exp: arith_expression RELATIONAL_OP arith_expression •  [BOOLEAN_OP, CLOSE_PARANTHESIS, DO, THEN]
   48 arith_expression: arith_expression • ARITHEMATIC_OP arith_expression
   49                 | arith_expression • ARITHEMATIC_OP_MINUS arith_expression

    ARITHEMATIC_OP        shift, and go to state 69
    ARITHEMATIC_OP_MINUS  shift, and go to state 71

    $default  reduce using rule 35 (relational_exp)


State 95

   48 arith_expression: arith_expression • ARITHEMATIC_OP arith_expression
   49                 | arith_expression • ARITHEMATIC_OP_MINUS arith_expression
   49                 | arith_expression ARITHEMATIC_OP_MINUS arith_expression •  [ARITHEMATIC_OP, RELATIONAL_OP, SEMICOLON, BOOLEAN_OP, CLOSE_BRACKET, CLOSE_PARANTHESIS, DO, DOWNTO, TO, THEN, ARITHEMATIC_OP_MINUS]

    $default  reduce using rule 49 (arith_expression)

    Conflict between rule 49 and token ARITHEMATIC_OP resolved as reduce (ARITHEMATIC_OP < ARITHEMATIC_OP_MINUS).
    Conflict between rule 49 and token ARITHEMATIC_OP_MINUS resolved as reduce (%left ARITHEMATIC_OP_MINUS).


State 96

   30 conditionals: unit_x BOOLEAN_OP conditionals •

    $default  reduce using rule 30 (conditionals)


State 97

   30 conditionals: unit_x • BOOLEAN_OP conditionals
   31             | unit_x • BOOLEAN_OP unit_x
   31             | unit_x BOOLEAN_OP unit_x •  [CLOSE_PARANTHESIS, DO, THEN]

    BOOLEAN_OP  shift, and go to state 72

    $default  reduce using rule 31 (conditionals)


State 98

   22 statementline: WHILE condition DO program_declaration • SEMICOLON

    SEMICOLON  shift, and go to state 109


State 99

   20 statementline: FOR IDENTIFIER ASSIGNMENT_OP arith_expression • TO arith_expression DO program_declaration SEMICOLON
   21              | FOR IDENTIFIER ASSIGNMENT_OP arith_expression • DOWNTO arith_expression DO program_declaration SEMICOLON
   48 arith_expression: arith_expression • ARITHEMATIC_OP arith_expression
   49                 | arith_expression • ARITHEMATIC_OP_MINUS arith_expression

    ARITHEMATIC_OP        shift, and go to state 69
    DOWNTO                shift, and go to state 110
    TO                    shift, and go to state 111
    ARITHEMATIC_OP_MINUS  shift, and go to state 71


State 100

   42 possible_write_values: IDENTIFIER OPEN_BRACKET • arith_expression CLOSE_BRACKET
   45 arith_expression: • unit_2
   46                 | • unit
   47                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   48                 | • arith_expression ARITHEMATIC_OP arith_expression
   49                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   52 unit: • IDENTIFIER
   53     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   54     | • ARITHEMATIC_OP_MINUS arith_expression
   55 unit_2: • CONSTANT

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 54
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    arith_expression  go to state 112
    unit              go to state 56
    unit_2            go to state 45


State 101

    7 left_side_vars: • IDENTIFIER
    8               | • IDENTIFIER COMMA left_side_vars
   39 possible_write_values: • left_side_vars
   40                      | • STRING_CONSTANT
   41                      | • STRING_CONSTANT COMMA possible_write_values
   41                      | STRING_CONSTANT COMMA • possible_write_values
   42                      | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET

    IDENTIFIER       shift, and go to state 75
    STRING_CONSTANT  shift, and go to state 76

    left_side_vars         go to state 77
    possible_write_values  go to state 113


State 102

   15 statementline: WRITE OPEN_PARANTHESIS possible_writes CLOSE_PARANTHESIS • SEMICOLON

    SEMICOLON  shift, and go to state 114


State 103

   44 possible_reads: IDENTIFIER OPEN_BRACKET • arith_expression CLOSE_BRACKET
   45 arith_expression: • unit_2
   46                 | • unit
   47                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   48                 | • arith_expression ARITHEMATIC_OP arith_expression
   49                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   52 unit: • IDENTIFIER
   53     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   54     | • ARITHEMATIC_OP_MINUS arith_expression
   55 unit_2: • CONSTANT

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 54
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    arith_expression  go to state 115
    unit              go to state 56
    unit_2            go to state 45


State 104

   16 statementline: READ OPEN_PARANTHESIS possible_reads CLOSE_PARANTHESIS • SEMICOLON

    SEMICOLON  shift, and go to state 116


State 105

   10 rigth_side_type: ARRAY OPEN_BRACKET CONSTANT RANGE_DOTS • CONSTANT CLOSE_BRACKET OF DATATYPE

    CONSTANT  shift, and go to state 117


State 106

   53 unit: IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET •

    $default  reduce using rule 53 (unit)


State 107

   19 statementline: IF condition THEN program_declaration SEMICOLON •

    $default  reduce using rule 19 (statementline)


State 108

   11 program_declaration: • BEGIN_TAG statements END
   12                    | • BEGIN_TAG END
   18 statementline: IF condition THEN program_declaration ELSE • program_declaration SEMICOLON

    BEGIN_TAG  shift, and go to state 12

    program_declaration  go to state 118


State 109

   22 statementline: WHILE condition DO program_declaration SEMICOLON •

    $default  reduce using rule 22 (statementline)


State 110

   21 statementline: FOR IDENTIFIER ASSIGNMENT_OP arith_expression DOWNTO • arith_expression DO program_declaration SEMICOLON
   45 arith_expression: • unit_2
   46                 | • unit
   47                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   48                 | • arith_expression ARITHEMATIC_OP arith_expression
   49                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   52 unit: • IDENTIFIER
   53     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   54     | • ARITHEMATIC_OP_MINUS arith_expression
   55 unit_2: • CONSTANT

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 54
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    arith_expression  go to state 119
    unit              go to state 56
    unit_2            go to state 45


State 111

   20 statementline: FOR IDENTIFIER ASSIGNMENT_OP arith_expression TO • arith_expression DO program_declaration SEMICOLON
   45 arith_expression: • unit_2
   46                 | • unit
   47                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   48                 | • arith_expression ARITHEMATIC_OP arith_expression
   49                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   52 unit: • IDENTIFIER
   53     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   54     | • ARITHEMATIC_OP_MINUS arith_expression
   55 unit_2: • CONSTANT

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 54
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    arith_expression  go to state 120
    unit              go to state 56
    unit_2            go to state 45


State 112

   42 possible_write_values: IDENTIFIER OPEN_BRACKET arith_expression • CLOSE_BRACKET
   48 arith_expression: arith_expression • ARITHEMATIC_OP arith_expression
   49                 | arith_expression • ARITHEMATIC_OP_MINUS arith_expression

    ARITHEMATIC_OP        shift, and go to state 69
    CLOSE_BRACKET         shift, and go to state 121
    ARITHEMATIC_OP_MINUS  shift, and go to state 71


State 113

   41 possible_write_values: STRING_CONSTANT COMMA possible_write_values •

    $default  reduce using rule 41 (possible_write_values)


State 114

   15 statementline: WRITE OPEN_PARANTHESIS possible_writes CLOSE_PARANTHESIS SEMICOLON •

    $default  reduce using rule 15 (statementline)


State 115

   44 possible_reads: IDENTIFIER OPEN_BRACKET arith_expression • CLOSE_BRACKET
   48 arith_expression: arith_expression • ARITHEMATIC_OP arith_expression
   49                 | arith_expression • ARITHEMATIC_OP_MINUS arith_expression

    ARITHEMATIC_OP        shift, and go to state 69
    CLOSE_BRACKET         shift, and go to state 122
    ARITHEMATIC_OP_MINUS  shift, and go to state 71


State 116

   16 statementline: READ OPEN_PARANTHESIS possible_reads CLOSE_PARANTHESIS SEMICOLON •

    $default  reduce using rule 16 (statementline)


State 117

   10 rigth_side_type: ARRAY OPEN_BRACKET CONSTANT RANGE_DOTS CONSTANT • CLOSE_BRACKET OF DATATYPE

    CLOSE_BRACKET  shift, and go to state 123


State 118

   18 statementline: IF condition THEN program_declaration ELSE program_declaration • SEMICOLON

    SEMICOLON  shift, and go to state 124


State 119

   21 statementline: FOR IDENTIFIER ASSIGNMENT_OP arith_expression DOWNTO arith_expression • DO program_declaration SEMICOLON
   48 arith_expression: arith_expression • ARITHEMATIC_OP arith_expression
   49                 | arith_expression • ARITHEMATIC_OP_MINUS arith_expression

    ARITHEMATIC_OP        shift, and go to state 69
    DO                    shift, and go to state 125
    ARITHEMATIC_OP_MINUS  shift, and go to state 71


State 120

   20 statementline: FOR IDENTIFIER ASSIGNMENT_OP arith_expression TO arith_expression • DO program_declaration SEMICOLON
   48 arith_expression: arith_expression • ARITHEMATIC_OP arith_expression
   49                 | arith_expression • ARITHEMATIC_OP_MINUS arith_expression

    ARITHEMATIC_OP        shift, and go to state 69
    DO                    shift, and go to state 126
    ARITHEMATIC_OP_MINUS  shift, and go to state 71


State 121

   42 possible_write_values: IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET •

    $default  reduce using rule 42 (possible_write_values)


State 122

   44 possible_reads: IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET •

    $default  reduce using rule 44 (possible_reads)


State 123

   10 rigth_side_type: ARRAY OPEN_BRACKET CONSTANT RANGE_DOTS CONSTANT CLOSE_BRACKET • OF DATATYPE

    OF  shift, and go to state 127


State 124

   18 statementline: IF condition THEN program_declaration ELSE program_declaration SEMICOLON •

    $default  reduce using rule 18 (statementline)


State 125

   11 program_declaration: • BEGIN_TAG statements END
   12                    | • BEGIN_TAG END
   21 statementline: FOR IDENTIFIER ASSIGNMENT_OP arith_expression DOWNTO arith_expression DO • program_declaration SEMICOLON

    BEGIN_TAG  shift, and go to state 12

    program_declaration  go to state 128


State 126

   11 program_declaration: • BEGIN_TAG statements END
   12                    | • BEGIN_TAG END
   20 statementline: FOR IDENTIFIER ASSIGNMENT_OP arith_expression TO arith_expression DO • program_declaration SEMICOLON

    BEGIN_TAG  shift, and go to state 12

    program_declaration  go to state 129


State 127

   10 rigth_side_type: ARRAY OPEN_BRACKET CONSTANT RANGE_DOTS CONSTANT CLOSE_BRACKET OF • DATATYPE

    DATATYPE  shift, and go to state 130


State 128

   21 statementline: FOR IDENTIFIER ASSIGNMENT_OP arith_expression DOWNTO arith_expression DO program_declaration • SEMICOLON

    SEMICOLON  shift, and go to state 131


State 129

   20 statementline: FOR IDENTIFIER ASSIGNMENT_OP arith_expression TO arith_expression DO program_declaration • SEMICOLON

    SEMICOLON  shift, and go to state 132


State 130

   10 rigth_side_type: ARRAY OPEN_BRACKET CONSTANT RANGE_DOTS CONSTANT CLOSE_BRACKET OF DATATYPE •

    $default  reduce using rule 10 (rigth_side_type)


State 131

   21 statementline: FOR IDENTIFIER ASSIGNMENT_OP arith_expression DOWNTO arith_expression DO program_declaration SEMICOLON •

    $default  reduce using rule 21 (statementline)


State 132

   20 statementline: FOR IDENTIFIER ASSIGNMENT_OP arith_expression TO arith_expression DO program_declaration SEMICOLON •

    $default  reduce using rule 20 (statementline)
