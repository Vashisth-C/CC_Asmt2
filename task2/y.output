Grammar

    0 $accept: start $end

    1 start: PROGRAM IDENTIFIER SEMICOLON variable_declaration program_declaration PERIOD

    2 variable_declaration: VAR variable_list
    3                     | ε

    4 variable_list: variable_line
    5              | variable_line variable_list

    6 variable_line: left_side_vars COLON rigth_side_type SEMICOLON

    7 left_side_vars: IDENTIFIER
    8               | IDENTIFIER COMMA left_side_vars

    9 rigth_side_type: DATATYPE
   10                | ARRAY OPEN_BRACKET CONSTANT RANGE_DOTS CONSTANT CLOSE_BRACKET OF DATATYPE

   11 program_declaration: BEGIN_TAG statements END
   12                    | BEGIN_TAG END

   13 statements: statementline
   14           | statementline statements

   15 statementline: WRITE OPEN_PARANTHESIS possible_writes CLOSE_PARANTHESIS SEMICOLON
   16              | READ OPEN_PARANTHESIS possible_reads CLOSE_PARANTHESIS SEMICOLON
   17              | IDENTIFIER ASSIGNMENT_OP arith_expression SEMICOLON
   18              | IF OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS THEN program_declaration ELSE program_declaration SEMICOLON
   19              | IF OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS THEN program_declaration SEMICOLON
   20              | IF conditionals THEN program_declaration ELSE program_declaration SEMICOLON
   21              | IF conditionals THEN program_declaration SEMICOLON
   22              | WHILE OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS DO program_declaration SEMICOLON
   23              | FOR IDENTIFIER ASSIGNMENT_OP arith_expression TO arith_expression DO program_declaration SEMICOLON
   24              | FOR IDENTIFIER ASSIGNMENT_OP arith_expression DOWNTO arith_expression DO program_declaration SEMICOLON
   25              | WHILE conditionals DO program_declaration SEMICOLON

   26 conditionals: relational_exp
   27             | condtional_unit
   28             | relational_exp BOOLEAN_OP conditionals
   29             | relational_exp BOOLEAN_OP unit
   30             | unit BOOLEAN_OP conditionals
   31             | unit BOOLEAN_OP unit
   32             | BOOLEAN_OP_NOT conditionals
   33             | ε

   34 condtional_unit: BOOLEAN_OP_NOT unit

   35 relational_exp: arith_expression RELATIONAL_OP arith_expression

   36 possible_writes: possible_write_values
   37                | ε

   38 possible_write_values: left_side_vars
   39                      | STRING_CONSTANT
   40                      | STRING_CONSTANT COMMA possible_write_values
   41                      | IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET

   42 possible_reads: IDENTIFIER
   43               | IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET

   44 arith_expression: unit
   45                 | OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   46                 | arith_expression ARITHEMATIC_OP arith_expression
   47                 | arith_expression ARITHEMATIC_OP_MINUS arith_expression

   48 unit: IDENTIFIER
   49     | CONSTANT
   50     | IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   51     | ARITHEMATIC_OP_MINUS arith_expression


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER (258) 1 7 8 17 23 24 41 42 43 48 50
    CONSTANT (259) 10 49
    ARITHEMATIC_OP (260) 46
    RELATIONAL_OP (261) 35
    ASSIGNMENT_OP (262) 17 23 24
    SEMICOLON (263) 1 6 15 16 17 18 19 20 21 22 23 24 25
    COMMA (264) 8 40
    BOOLEAN_OP (265) 28 29 30 31
    OPEN_BRACKET (266) 10 41 43 50
    OPEN_PARANTHESIS (267) 15 16 18 19 22 45
    CLOSE_BRACKET (268) 10 41 43 50
    CLOSE_PARANTHESIS (269) 15 16 18 19 22 45
    PERIOD (270) 1
    RANGE_DOTS (271) 10
    IF (272) 18 19 20 21
    WHILE (273) 22 25
    ELSE (274) 18 20
    FOR (275) 23 24
    DO (276) 22 23 24 25
    BEGIN_TAG (277) 11 12
    END (278) 11 12
    WRITE (279) 15
    READ (280) 16
    PROGRAM (281) 1
    STRING_CONSTANT (282) 39 40
    DOWNTO (283) 24
    TO (284) 23
    OF (285) 10
    COLON (286) 6
    VAR (287) 2
    DATATYPE (288) 9 10
    ARRAY (289) 10
    THEN (290) 18 19 20 21
    BOOLEAN_OP_NOT (291) 32 34
    ARITHEMATIC_OP_MINUS (292) 47 51


Nonterminals, with rules where they appear

    $accept (38)
        on left: 0
    start (39)
        on left: 1
        on right: 0
    variable_declaration (40)
        on left: 2 3
        on right: 1
    variable_list (41)
        on left: 4 5
        on right: 2 5
    variable_line (42)
        on left: 6
        on right: 4 5
    left_side_vars (43)
        on left: 7 8
        on right: 6 8 38
    rigth_side_type (44)
        on left: 9 10
        on right: 6
    program_declaration (45)
        on left: 11 12
        on right: 1 18 19 20 21 22 23 24 25
    statements (46)
        on left: 13 14
        on right: 11 14
    statementline (47)
        on left: 15 16 17 18 19 20 21 22 23 24 25
        on right: 13 14
    conditionals (48)
        on left: 26 27 28 29 30 31 32 33
        on right: 18 19 20 21 22 25 28 30 32
    condtional_unit (49)
        on left: 34
        on right: 27
    relational_exp (50)
        on left: 35
        on right: 26 28 29
    possible_writes (51)
        on left: 36 37
        on right: 15
    possible_write_values (52)
        on left: 38 39 40 41
        on right: 36 40
    possible_reads (53)
        on left: 42 43
        on right: 16
    arith_expression (54)
        on left: 44 45 46 47
        on right: 17 23 24 35 41 43 45 46 47 50 51
    unit (55)
        on left: 48 49 50 51
        on right: 29 30 31 34 44


State 0

    0 $accept: • start $end
    1 start: • PROGRAM IDENTIFIER SEMICOLON variable_declaration program_declaration PERIOD

    PROGRAM  shift, and go to state 1

    start  go to state 2


State 1

    1 start: PROGRAM • IDENTIFIER SEMICOLON variable_declaration program_declaration PERIOD

    IDENTIFIER  shift, and go to state 3


State 2

    0 $accept: start • $end

    $end  shift, and go to state 4


State 3

    1 start: PROGRAM IDENTIFIER • SEMICOLON variable_declaration program_declaration PERIOD

    SEMICOLON  shift, and go to state 5


State 4

    0 $accept: start $end •

    $default  accept


State 5

    1 start: PROGRAM IDENTIFIER SEMICOLON • variable_declaration program_declaration PERIOD
    2 variable_declaration: • VAR variable_list
    3                     | ε •  [BEGIN_TAG]

    VAR  shift, and go to state 6

    $default  reduce using rule 3 (variable_declaration)

    variable_declaration  go to state 7


State 6

    2 variable_declaration: VAR • variable_list
    4 variable_list: • variable_line
    5              | • variable_line variable_list
    6 variable_line: • left_side_vars COLON rigth_side_type SEMICOLON
    7 left_side_vars: • IDENTIFIER
    8               | • IDENTIFIER COMMA left_side_vars

    IDENTIFIER  shift, and go to state 8

    variable_list   go to state 9
    variable_line   go to state 10
    left_side_vars  go to state 11


State 7

    1 start: PROGRAM IDENTIFIER SEMICOLON variable_declaration • program_declaration PERIOD
   11 program_declaration: • BEGIN_TAG statements END
   12                    | • BEGIN_TAG END

    BEGIN_TAG  shift, and go to state 12

    program_declaration  go to state 13


State 8

    7 left_side_vars: IDENTIFIER •  [CLOSE_PARANTHESIS, COLON]
    8               | IDENTIFIER • COMMA left_side_vars

    COMMA  shift, and go to state 14

    $default  reduce using rule 7 (left_side_vars)


State 9

    2 variable_declaration: VAR variable_list •

    $default  reduce using rule 2 (variable_declaration)


State 10

    4 variable_list: • variable_line
    4              | variable_line •  [BEGIN_TAG]
    5              | • variable_line variable_list
    5              | variable_line • variable_list
    6 variable_line: • left_side_vars COLON rigth_side_type SEMICOLON
    7 left_side_vars: • IDENTIFIER
    8               | • IDENTIFIER COMMA left_side_vars

    IDENTIFIER  shift, and go to state 8

    $default  reduce using rule 4 (variable_list)

    variable_list   go to state 15
    variable_line   go to state 10
    left_side_vars  go to state 11


State 11

    6 variable_line: left_side_vars • COLON rigth_side_type SEMICOLON

    COLON  shift, and go to state 16


State 12

   11 program_declaration: BEGIN_TAG • statements END
   12                    | BEGIN_TAG • END
   13 statements: • statementline
   14           | • statementline statements
   15 statementline: • WRITE OPEN_PARANTHESIS possible_writes CLOSE_PARANTHESIS SEMICOLON
   16              | • READ OPEN_PARANTHESIS possible_reads CLOSE_PARANTHESIS SEMICOLON
   17              | • IDENTIFIER ASSIGNMENT_OP arith_expression SEMICOLON
   18              | • IF OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS THEN program_declaration ELSE program_declaration SEMICOLON
   19              | • IF OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS THEN program_declaration SEMICOLON
   20              | • IF conditionals THEN program_declaration ELSE program_declaration SEMICOLON
   21              | • IF conditionals THEN program_declaration SEMICOLON
   22              | • WHILE OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS DO program_declaration SEMICOLON
   23              | • FOR IDENTIFIER ASSIGNMENT_OP arith_expression TO arith_expression DO program_declaration SEMICOLON
   24              | • FOR IDENTIFIER ASSIGNMENT_OP arith_expression DOWNTO arith_expression DO program_declaration SEMICOLON
   25              | • WHILE conditionals DO program_declaration SEMICOLON

    IDENTIFIER  shift, and go to state 17
    IF          shift, and go to state 18
    WHILE       shift, and go to state 19
    FOR         shift, and go to state 20
    END         shift, and go to state 21
    WRITE       shift, and go to state 22
    READ        shift, and go to state 23

    statements     go to state 24
    statementline  go to state 25


State 13

    1 start: PROGRAM IDENTIFIER SEMICOLON variable_declaration program_declaration • PERIOD

    PERIOD  shift, and go to state 26


State 14

    7 left_side_vars: • IDENTIFIER
    8               | • IDENTIFIER COMMA left_side_vars
    8               | IDENTIFIER COMMA • left_side_vars

    IDENTIFIER  shift, and go to state 8

    left_side_vars  go to state 27


State 15

    5 variable_list: variable_line variable_list •

    $default  reduce using rule 5 (variable_list)


State 16

    6 variable_line: left_side_vars COLON • rigth_side_type SEMICOLON
    9 rigth_side_type: • DATATYPE
   10                | • ARRAY OPEN_BRACKET CONSTANT RANGE_DOTS CONSTANT CLOSE_BRACKET OF DATATYPE

    DATATYPE  shift, and go to state 28
    ARRAY     shift, and go to state 29

    rigth_side_type  go to state 30


State 17

   17 statementline: IDENTIFIER • ASSIGNMENT_OP arith_expression SEMICOLON

    ASSIGNMENT_OP  shift, and go to state 31


State 18

   18 statementline: IF • OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS THEN program_declaration ELSE program_declaration SEMICOLON
   19              | IF • OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS THEN program_declaration SEMICOLON
   20              | IF • conditionals THEN program_declaration ELSE program_declaration SEMICOLON
   21              | IF • conditionals THEN program_declaration SEMICOLON
   26 conditionals: • relational_exp
   27             | • condtional_unit
   28             | • relational_exp BOOLEAN_OP conditionals
   29             | • relational_exp BOOLEAN_OP unit
   30             | • unit BOOLEAN_OP conditionals
   31             | • unit BOOLEAN_OP unit
   32             | • BOOLEAN_OP_NOT conditionals
   33             | ε •  [THEN]
   34 condtional_unit: • BOOLEAN_OP_NOT unit
   35 relational_exp: • arith_expression RELATIONAL_OP arith_expression
   44 arith_expression: • unit
   45                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   46                 | • arith_expression ARITHEMATIC_OP arith_expression
   47                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   48 unit: • IDENTIFIER
   49     | • CONSTANT
   50     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   51     | • ARITHEMATIC_OP_MINUS arith_expression

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 34
    BOOLEAN_OP_NOT        shift, and go to state 35
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    $default  reduce using rule 33 (conditionals)

    conditionals      go to state 37
    condtional_unit   go to state 38
    relational_exp    go to state 39
    arith_expression  go to state 40
    unit              go to state 41


State 19

   22 statementline: WHILE • OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS DO program_declaration SEMICOLON
   25              | WHILE • conditionals DO program_declaration SEMICOLON
   26 conditionals: • relational_exp
   27             | • condtional_unit
   28             | • relational_exp BOOLEAN_OP conditionals
   29             | • relational_exp BOOLEAN_OP unit
   30             | • unit BOOLEAN_OP conditionals
   31             | • unit BOOLEAN_OP unit
   32             | • BOOLEAN_OP_NOT conditionals
   33             | ε •  [DO]
   34 condtional_unit: • BOOLEAN_OP_NOT unit
   35 relational_exp: • arith_expression RELATIONAL_OP arith_expression
   44 arith_expression: • unit
   45                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   46                 | • arith_expression ARITHEMATIC_OP arith_expression
   47                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   48 unit: • IDENTIFIER
   49     | • CONSTANT
   50     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   51     | • ARITHEMATIC_OP_MINUS arith_expression

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 42
    BOOLEAN_OP_NOT        shift, and go to state 35
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    $default  reduce using rule 33 (conditionals)

    conditionals      go to state 43
    condtional_unit   go to state 38
    relational_exp    go to state 39
    arith_expression  go to state 40
    unit              go to state 41


State 20

   23 statementline: FOR • IDENTIFIER ASSIGNMENT_OP arith_expression TO arith_expression DO program_declaration SEMICOLON
   24              | FOR • IDENTIFIER ASSIGNMENT_OP arith_expression DOWNTO arith_expression DO program_declaration SEMICOLON

    IDENTIFIER  shift, and go to state 44


State 21

   12 program_declaration: BEGIN_TAG END •

    $default  reduce using rule 12 (program_declaration)


State 22

   15 statementline: WRITE • OPEN_PARANTHESIS possible_writes CLOSE_PARANTHESIS SEMICOLON

    OPEN_PARANTHESIS  shift, and go to state 45


State 23

   16 statementline: READ • OPEN_PARANTHESIS possible_reads CLOSE_PARANTHESIS SEMICOLON

    OPEN_PARANTHESIS  shift, and go to state 46


State 24

   11 program_declaration: BEGIN_TAG statements • END

    END  shift, and go to state 47


State 25

   13 statements: • statementline
   13           | statementline •  [END]
   14           | • statementline statements
   14           | statementline • statements
   15 statementline: • WRITE OPEN_PARANTHESIS possible_writes CLOSE_PARANTHESIS SEMICOLON
   16              | • READ OPEN_PARANTHESIS possible_reads CLOSE_PARANTHESIS SEMICOLON
   17              | • IDENTIFIER ASSIGNMENT_OP arith_expression SEMICOLON
   18              | • IF OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS THEN program_declaration ELSE program_declaration SEMICOLON
   19              | • IF OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS THEN program_declaration SEMICOLON
   20              | • IF conditionals THEN program_declaration ELSE program_declaration SEMICOLON
   21              | • IF conditionals THEN program_declaration SEMICOLON
   22              | • WHILE OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS DO program_declaration SEMICOLON
   23              | • FOR IDENTIFIER ASSIGNMENT_OP arith_expression TO arith_expression DO program_declaration SEMICOLON
   24              | • FOR IDENTIFIER ASSIGNMENT_OP arith_expression DOWNTO arith_expression DO program_declaration SEMICOLON
   25              | • WHILE conditionals DO program_declaration SEMICOLON

    IDENTIFIER  shift, and go to state 17
    IF          shift, and go to state 18
    WHILE       shift, and go to state 19
    FOR         shift, and go to state 20
    WRITE       shift, and go to state 22
    READ        shift, and go to state 23

    $default  reduce using rule 13 (statements)

    statements     go to state 48
    statementline  go to state 25


State 26

    1 start: PROGRAM IDENTIFIER SEMICOLON variable_declaration program_declaration PERIOD •

    $default  reduce using rule 1 (start)


State 27

    8 left_side_vars: IDENTIFIER COMMA left_side_vars •

    $default  reduce using rule 8 (left_side_vars)


State 28

    9 rigth_side_type: DATATYPE •

    $default  reduce using rule 9 (rigth_side_type)


State 29

   10 rigth_side_type: ARRAY • OPEN_BRACKET CONSTANT RANGE_DOTS CONSTANT CLOSE_BRACKET OF DATATYPE

    OPEN_BRACKET  shift, and go to state 49


State 30

    6 variable_line: left_side_vars COLON rigth_side_type • SEMICOLON

    SEMICOLON  shift, and go to state 50


State 31

   17 statementline: IDENTIFIER ASSIGNMENT_OP • arith_expression SEMICOLON
   44 arith_expression: • unit
   45                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   46                 | • arith_expression ARITHEMATIC_OP arith_expression
   47                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   48 unit: • IDENTIFIER
   49     | • CONSTANT
   50     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   51     | • ARITHEMATIC_OP_MINUS arith_expression

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 51
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    arith_expression  go to state 52
    unit              go to state 53


State 32

   48 unit: IDENTIFIER •  [ARITHEMATIC_OP, RELATIONAL_OP, SEMICOLON, BOOLEAN_OP, CLOSE_BRACKET, CLOSE_PARANTHESIS, DO, DOWNTO, TO, THEN, ARITHEMATIC_OP_MINUS]
   50     | IDENTIFIER • OPEN_BRACKET arith_expression CLOSE_BRACKET

    OPEN_BRACKET  shift, and go to state 54

    $default  reduce using rule 48 (unit)


State 33

   49 unit: CONSTANT •

    $default  reduce using rule 49 (unit)


State 34

   18 statementline: IF OPEN_PARANTHESIS • conditionals CLOSE_PARANTHESIS THEN program_declaration ELSE program_declaration SEMICOLON
   19              | IF OPEN_PARANTHESIS • conditionals CLOSE_PARANTHESIS THEN program_declaration SEMICOLON
   26 conditionals: • relational_exp
   27             | • condtional_unit
   28             | • relational_exp BOOLEAN_OP conditionals
   29             | • relational_exp BOOLEAN_OP unit
   30             | • unit BOOLEAN_OP conditionals
   31             | • unit BOOLEAN_OP unit
   32             | • BOOLEAN_OP_NOT conditionals
   33             | ε •  [CLOSE_PARANTHESIS]
   34 condtional_unit: • BOOLEAN_OP_NOT unit
   35 relational_exp: • arith_expression RELATIONAL_OP arith_expression
   44 arith_expression: • unit
   45                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   45                 | OPEN_PARANTHESIS • arith_expression CLOSE_PARANTHESIS
   46                 | • arith_expression ARITHEMATIC_OP arith_expression
   47                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   48 unit: • IDENTIFIER
   49     | • CONSTANT
   50     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   51     | • ARITHEMATIC_OP_MINUS arith_expression

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 51
    BOOLEAN_OP_NOT        shift, and go to state 35
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    $default  reduce using rule 33 (conditionals)

    conditionals      go to state 55
    condtional_unit   go to state 38
    relational_exp    go to state 39
    arith_expression  go to state 56
    unit              go to state 41


State 35

   26 conditionals: • relational_exp
   27             | • condtional_unit
   28             | • relational_exp BOOLEAN_OP conditionals
   29             | • relational_exp BOOLEAN_OP unit
   30             | • unit BOOLEAN_OP conditionals
   31             | • unit BOOLEAN_OP unit
   32             | • BOOLEAN_OP_NOT conditionals
   32             | BOOLEAN_OP_NOT • conditionals
   33             | ε •  [CLOSE_PARANTHESIS, DO, THEN]
   34 condtional_unit: • BOOLEAN_OP_NOT unit
   34                | BOOLEAN_OP_NOT • unit
   35 relational_exp: • arith_expression RELATIONAL_OP arith_expression
   44 arith_expression: • unit
   45                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   46                 | • arith_expression ARITHEMATIC_OP arith_expression
   47                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   48 unit: • IDENTIFIER
   49     | • CONSTANT
   50     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   51     | • ARITHEMATIC_OP_MINUS arith_expression

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 51
    BOOLEAN_OP_NOT        shift, and go to state 35
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    $default  reduce using rule 33 (conditionals)

    conditionals      go to state 57
    condtional_unit   go to state 38
    relational_exp    go to state 39
    arith_expression  go to state 40
    unit              go to state 58


State 36

   44 arith_expression: • unit
   45                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   46                 | • arith_expression ARITHEMATIC_OP arith_expression
   47                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   48 unit: • IDENTIFIER
   49     | • CONSTANT
   50     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   51     | • ARITHEMATIC_OP_MINUS arith_expression
   51     | ARITHEMATIC_OP_MINUS • arith_expression

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 51
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    arith_expression  go to state 59
    unit              go to state 53


State 37

   20 statementline: IF conditionals • THEN program_declaration ELSE program_declaration SEMICOLON
   21              | IF conditionals • THEN program_declaration SEMICOLON

    THEN  shift, and go to state 60


State 38

   27 conditionals: condtional_unit •

    $default  reduce using rule 27 (conditionals)


State 39

   26 conditionals: relational_exp •  [CLOSE_PARANTHESIS, DO, THEN]
   28             | relational_exp • BOOLEAN_OP conditionals
   29             | relational_exp • BOOLEAN_OP unit

    BOOLEAN_OP  shift, and go to state 61

    $default  reduce using rule 26 (conditionals)


State 40

   35 relational_exp: arith_expression • RELATIONAL_OP arith_expression
   46 arith_expression: arith_expression • ARITHEMATIC_OP arith_expression
   47                 | arith_expression • ARITHEMATIC_OP_MINUS arith_expression

    ARITHEMATIC_OP        shift, and go to state 62
    RELATIONAL_OP         shift, and go to state 63
    ARITHEMATIC_OP_MINUS  shift, and go to state 64


State 41

   30 conditionals: unit • BOOLEAN_OP conditionals
   31             | unit • BOOLEAN_OP unit
   44 arith_expression: unit •  [ARITHEMATIC_OP, RELATIONAL_OP, CLOSE_PARANTHESIS, ARITHEMATIC_OP_MINUS]

    BOOLEAN_OP  shift, and go to state 65

    $default  reduce using rule 44 (arith_expression)


State 42

   22 statementline: WHILE OPEN_PARANTHESIS • conditionals CLOSE_PARANTHESIS DO program_declaration SEMICOLON
   26 conditionals: • relational_exp
   27             | • condtional_unit
   28             | • relational_exp BOOLEAN_OP conditionals
   29             | • relational_exp BOOLEAN_OP unit
   30             | • unit BOOLEAN_OP conditionals
   31             | • unit BOOLEAN_OP unit
   32             | • BOOLEAN_OP_NOT conditionals
   33             | ε •  [CLOSE_PARANTHESIS]
   34 condtional_unit: • BOOLEAN_OP_NOT unit
   35 relational_exp: • arith_expression RELATIONAL_OP arith_expression
   44 arith_expression: • unit
   45                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   45                 | OPEN_PARANTHESIS • arith_expression CLOSE_PARANTHESIS
   46                 | • arith_expression ARITHEMATIC_OP arith_expression
   47                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   48 unit: • IDENTIFIER
   49     | • CONSTANT
   50     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   51     | • ARITHEMATIC_OP_MINUS arith_expression

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 51
    BOOLEAN_OP_NOT        shift, and go to state 35
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    $default  reduce using rule 33 (conditionals)

    conditionals      go to state 66
    condtional_unit   go to state 38
    relational_exp    go to state 39
    arith_expression  go to state 56
    unit              go to state 41


State 43

   25 statementline: WHILE conditionals • DO program_declaration SEMICOLON

    DO  shift, and go to state 67


State 44

   23 statementline: FOR IDENTIFIER • ASSIGNMENT_OP arith_expression TO arith_expression DO program_declaration SEMICOLON
   24              | FOR IDENTIFIER • ASSIGNMENT_OP arith_expression DOWNTO arith_expression DO program_declaration SEMICOLON

    ASSIGNMENT_OP  shift, and go to state 68


State 45

    7 left_side_vars: • IDENTIFIER
    8               | • IDENTIFIER COMMA left_side_vars
   15 statementline: WRITE OPEN_PARANTHESIS • possible_writes CLOSE_PARANTHESIS SEMICOLON
   36 possible_writes: • possible_write_values
   37                | ε •  [CLOSE_PARANTHESIS]
   38 possible_write_values: • left_side_vars
   39                      | • STRING_CONSTANT
   40                      | • STRING_CONSTANT COMMA possible_write_values
   41                      | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET

    IDENTIFIER       shift, and go to state 69
    STRING_CONSTANT  shift, and go to state 70

    $default  reduce using rule 37 (possible_writes)

    left_side_vars         go to state 71
    possible_writes        go to state 72
    possible_write_values  go to state 73


State 46

   16 statementline: READ OPEN_PARANTHESIS • possible_reads CLOSE_PARANTHESIS SEMICOLON
   42 possible_reads: • IDENTIFIER
   43               | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET

    IDENTIFIER  shift, and go to state 74

    possible_reads  go to state 75


State 47

   11 program_declaration: BEGIN_TAG statements END •

    $default  reduce using rule 11 (program_declaration)


State 48

   14 statements: statementline statements •

    $default  reduce using rule 14 (statements)


State 49

   10 rigth_side_type: ARRAY OPEN_BRACKET • CONSTANT RANGE_DOTS CONSTANT CLOSE_BRACKET OF DATATYPE

    CONSTANT  shift, and go to state 76


State 50

    6 variable_line: left_side_vars COLON rigth_side_type SEMICOLON •

    $default  reduce using rule 6 (variable_line)


State 51

   44 arith_expression: • unit
   45                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   45                 | OPEN_PARANTHESIS • arith_expression CLOSE_PARANTHESIS
   46                 | • arith_expression ARITHEMATIC_OP arith_expression
   47                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   48 unit: • IDENTIFIER
   49     | • CONSTANT
   50     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   51     | • ARITHEMATIC_OP_MINUS arith_expression

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 51
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    arith_expression  go to state 77
    unit              go to state 53


State 52

   17 statementline: IDENTIFIER ASSIGNMENT_OP arith_expression • SEMICOLON
   46 arith_expression: arith_expression • ARITHEMATIC_OP arith_expression
   47                 | arith_expression • ARITHEMATIC_OP_MINUS arith_expression

    ARITHEMATIC_OP        shift, and go to state 62
    SEMICOLON             shift, and go to state 78
    ARITHEMATIC_OP_MINUS  shift, and go to state 64


State 53

   44 arith_expression: unit •

    $default  reduce using rule 44 (arith_expression)


State 54

   44 arith_expression: • unit
   45                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   46                 | • arith_expression ARITHEMATIC_OP arith_expression
   47                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   48 unit: • IDENTIFIER
   49     | • CONSTANT
   50     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   50     | IDENTIFIER OPEN_BRACKET • arith_expression CLOSE_BRACKET
   51     | • ARITHEMATIC_OP_MINUS arith_expression

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 51
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    arith_expression  go to state 79
    unit              go to state 53


State 55

   18 statementline: IF OPEN_PARANTHESIS conditionals • CLOSE_PARANTHESIS THEN program_declaration ELSE program_declaration SEMICOLON
   19              | IF OPEN_PARANTHESIS conditionals • CLOSE_PARANTHESIS THEN program_declaration SEMICOLON

    CLOSE_PARANTHESIS  shift, and go to state 80


State 56

   35 relational_exp: arith_expression • RELATIONAL_OP arith_expression
   45 arith_expression: OPEN_PARANTHESIS arith_expression • CLOSE_PARANTHESIS
   46                 | arith_expression • ARITHEMATIC_OP arith_expression
   47                 | arith_expression • ARITHEMATIC_OP_MINUS arith_expression

    ARITHEMATIC_OP        shift, and go to state 62
    RELATIONAL_OP         shift, and go to state 63
    CLOSE_PARANTHESIS     shift, and go to state 81
    ARITHEMATIC_OP_MINUS  shift, and go to state 64


State 57

   32 conditionals: BOOLEAN_OP_NOT conditionals •

    $default  reduce using rule 32 (conditionals)


State 58

   30 conditionals: unit • BOOLEAN_OP conditionals
   31             | unit • BOOLEAN_OP unit
   34 condtional_unit: BOOLEAN_OP_NOT unit •  [CLOSE_PARANTHESIS, DO, THEN]
   44 arith_expression: unit •  [ARITHEMATIC_OP, RELATIONAL_OP, ARITHEMATIC_OP_MINUS]

    BOOLEAN_OP  shift, and go to state 65

    ARITHEMATIC_OP        reduce using rule 44 (arith_expression)
    RELATIONAL_OP         reduce using rule 44 (arith_expression)
    ARITHEMATIC_OP_MINUS  reduce using rule 44 (arith_expression)
    $default              reduce using rule 34 (condtional_unit)


State 59

   46 arith_expression: arith_expression • ARITHEMATIC_OP arith_expression
   47                 | arith_expression • ARITHEMATIC_OP_MINUS arith_expression
   51 unit: ARITHEMATIC_OP_MINUS arith_expression •  [ARITHEMATIC_OP, RELATIONAL_OP, SEMICOLON, BOOLEAN_OP, CLOSE_BRACKET, CLOSE_PARANTHESIS, DO, DOWNTO, TO, THEN, ARITHEMATIC_OP_MINUS]

    $default  reduce using rule 51 (unit)

    Conflict between rule 51 and token ARITHEMATIC_OP resolved as reduce (ARITHEMATIC_OP < ARITHEMATIC_OP_MINUS).
    Conflict between rule 51 and token ARITHEMATIC_OP_MINUS resolved as reduce (%left ARITHEMATIC_OP_MINUS).


State 60

   11 program_declaration: • BEGIN_TAG statements END
   12                    | • BEGIN_TAG END
   20 statementline: IF conditionals THEN • program_declaration ELSE program_declaration SEMICOLON
   21              | IF conditionals THEN • program_declaration SEMICOLON

    BEGIN_TAG  shift, and go to state 12

    program_declaration  go to state 82


State 61

   26 conditionals: • relational_exp
   27             | • condtional_unit
   28             | • relational_exp BOOLEAN_OP conditionals
   28             | relational_exp BOOLEAN_OP • conditionals
   29             | • relational_exp BOOLEAN_OP unit
   29             | relational_exp BOOLEAN_OP • unit
   30             | • unit BOOLEAN_OP conditionals
   31             | • unit BOOLEAN_OP unit
   32             | • BOOLEAN_OP_NOT conditionals
   33             | ε •  [CLOSE_PARANTHESIS, DO, THEN]
   34 condtional_unit: • BOOLEAN_OP_NOT unit
   35 relational_exp: • arith_expression RELATIONAL_OP arith_expression
   44 arith_expression: • unit
   45                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   46                 | • arith_expression ARITHEMATIC_OP arith_expression
   47                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   48 unit: • IDENTIFIER
   49     | • CONSTANT
   50     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   51     | • ARITHEMATIC_OP_MINUS arith_expression

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 51
    BOOLEAN_OP_NOT        shift, and go to state 35
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    $default  reduce using rule 33 (conditionals)

    conditionals      go to state 83
    condtional_unit   go to state 38
    relational_exp    go to state 39
    arith_expression  go to state 40
    unit              go to state 84


State 62

   44 arith_expression: • unit
   45                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   46                 | • arith_expression ARITHEMATIC_OP arith_expression
   46                 | arith_expression ARITHEMATIC_OP • arith_expression
   47                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   48 unit: • IDENTIFIER
   49     | • CONSTANT
   50     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   51     | • ARITHEMATIC_OP_MINUS arith_expression

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 51
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    arith_expression  go to state 85
    unit              go to state 53


State 63

   35 relational_exp: arith_expression RELATIONAL_OP • arith_expression
   44 arith_expression: • unit
   45                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   46                 | • arith_expression ARITHEMATIC_OP arith_expression
   47                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   48 unit: • IDENTIFIER
   49     | • CONSTANT
   50     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   51     | • ARITHEMATIC_OP_MINUS arith_expression

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 51
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    arith_expression  go to state 86
    unit              go to state 53


State 64

   44 arith_expression: • unit
   45                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   46                 | • arith_expression ARITHEMATIC_OP arith_expression
   47                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   47                 | arith_expression ARITHEMATIC_OP_MINUS • arith_expression
   48 unit: • IDENTIFIER
   49     | • CONSTANT
   50     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   51     | • ARITHEMATIC_OP_MINUS arith_expression

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 51
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    arith_expression  go to state 87
    unit              go to state 53


State 65

   26 conditionals: • relational_exp
   27             | • condtional_unit
   28             | • relational_exp BOOLEAN_OP conditionals
   29             | • relational_exp BOOLEAN_OP unit
   30             | • unit BOOLEAN_OP conditionals
   30             | unit BOOLEAN_OP • conditionals
   31             | • unit BOOLEAN_OP unit
   31             | unit BOOLEAN_OP • unit
   32             | • BOOLEAN_OP_NOT conditionals
   33             | ε •  [CLOSE_PARANTHESIS, DO, THEN]
   34 condtional_unit: • BOOLEAN_OP_NOT unit
   35 relational_exp: • arith_expression RELATIONAL_OP arith_expression
   44 arith_expression: • unit
   45                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   46                 | • arith_expression ARITHEMATIC_OP arith_expression
   47                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   48 unit: • IDENTIFIER
   49     | • CONSTANT
   50     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   51     | • ARITHEMATIC_OP_MINUS arith_expression

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 51
    BOOLEAN_OP_NOT        shift, and go to state 35
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    $default  reduce using rule 33 (conditionals)

    conditionals      go to state 88
    condtional_unit   go to state 38
    relational_exp    go to state 39
    arith_expression  go to state 40
    unit              go to state 89


State 66

   22 statementline: WHILE OPEN_PARANTHESIS conditionals • CLOSE_PARANTHESIS DO program_declaration SEMICOLON

    CLOSE_PARANTHESIS  shift, and go to state 90


State 67

   11 program_declaration: • BEGIN_TAG statements END
   12                    | • BEGIN_TAG END
   25 statementline: WHILE conditionals DO • program_declaration SEMICOLON

    BEGIN_TAG  shift, and go to state 12

    program_declaration  go to state 91


State 68

   23 statementline: FOR IDENTIFIER ASSIGNMENT_OP • arith_expression TO arith_expression DO program_declaration SEMICOLON
   24              | FOR IDENTIFIER ASSIGNMENT_OP • arith_expression DOWNTO arith_expression DO program_declaration SEMICOLON
   44 arith_expression: • unit
   45                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   46                 | • arith_expression ARITHEMATIC_OP arith_expression
   47                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   48 unit: • IDENTIFIER
   49     | • CONSTANT
   50     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   51     | • ARITHEMATIC_OP_MINUS arith_expression

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 51
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    arith_expression  go to state 92
    unit              go to state 53


State 69

    7 left_side_vars: IDENTIFIER •  [CLOSE_PARANTHESIS]
    8               | IDENTIFIER • COMMA left_side_vars
   41 possible_write_values: IDENTIFIER • OPEN_BRACKET arith_expression CLOSE_BRACKET

    COMMA         shift, and go to state 14
    OPEN_BRACKET  shift, and go to state 93

    $default  reduce using rule 7 (left_side_vars)


State 70

   39 possible_write_values: STRING_CONSTANT •  [CLOSE_PARANTHESIS]
   40                      | STRING_CONSTANT • COMMA possible_write_values

    COMMA  shift, and go to state 94

    $default  reduce using rule 39 (possible_write_values)


State 71

   38 possible_write_values: left_side_vars •

    $default  reduce using rule 38 (possible_write_values)


State 72

   15 statementline: WRITE OPEN_PARANTHESIS possible_writes • CLOSE_PARANTHESIS SEMICOLON

    CLOSE_PARANTHESIS  shift, and go to state 95


State 73

   36 possible_writes: possible_write_values •

    $default  reduce using rule 36 (possible_writes)


State 74

   42 possible_reads: IDENTIFIER •  [CLOSE_PARANTHESIS]
   43               | IDENTIFIER • OPEN_BRACKET arith_expression CLOSE_BRACKET

    OPEN_BRACKET  shift, and go to state 96

    $default  reduce using rule 42 (possible_reads)


State 75

   16 statementline: READ OPEN_PARANTHESIS possible_reads • CLOSE_PARANTHESIS SEMICOLON

    CLOSE_PARANTHESIS  shift, and go to state 97


State 76

   10 rigth_side_type: ARRAY OPEN_BRACKET CONSTANT • RANGE_DOTS CONSTANT CLOSE_BRACKET OF DATATYPE

    RANGE_DOTS  shift, and go to state 98


State 77

   45 arith_expression: OPEN_PARANTHESIS arith_expression • CLOSE_PARANTHESIS
   46                 | arith_expression • ARITHEMATIC_OP arith_expression
   47                 | arith_expression • ARITHEMATIC_OP_MINUS arith_expression

    ARITHEMATIC_OP        shift, and go to state 62
    CLOSE_PARANTHESIS     shift, and go to state 81
    ARITHEMATIC_OP_MINUS  shift, and go to state 64


State 78

   17 statementline: IDENTIFIER ASSIGNMENT_OP arith_expression SEMICOLON •

    $default  reduce using rule 17 (statementline)


State 79

   46 arith_expression: arith_expression • ARITHEMATIC_OP arith_expression
   47                 | arith_expression • ARITHEMATIC_OP_MINUS arith_expression
   50 unit: IDENTIFIER OPEN_BRACKET arith_expression • CLOSE_BRACKET

    ARITHEMATIC_OP        shift, and go to state 62
    CLOSE_BRACKET         shift, and go to state 99
    ARITHEMATIC_OP_MINUS  shift, and go to state 64


State 80

   18 statementline: IF OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS • THEN program_declaration ELSE program_declaration SEMICOLON
   19              | IF OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS • THEN program_declaration SEMICOLON

    THEN  shift, and go to state 100


State 81

   45 arith_expression: OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS •

    $default  reduce using rule 45 (arith_expression)


State 82

   20 statementline: IF conditionals THEN program_declaration • ELSE program_declaration SEMICOLON
   21              | IF conditionals THEN program_declaration • SEMICOLON

    SEMICOLON  shift, and go to state 101
    ELSE       shift, and go to state 102


State 83

   28 conditionals: relational_exp BOOLEAN_OP conditionals •

    $default  reduce using rule 28 (conditionals)


State 84

   29 conditionals: relational_exp BOOLEAN_OP unit •  [CLOSE_PARANTHESIS, DO, THEN]
   30             | unit • BOOLEAN_OP conditionals
   31             | unit • BOOLEAN_OP unit
   44 arith_expression: unit •  [ARITHEMATIC_OP, RELATIONAL_OP, ARITHEMATIC_OP_MINUS]

    BOOLEAN_OP  shift, and go to state 65

    ARITHEMATIC_OP        reduce using rule 44 (arith_expression)
    RELATIONAL_OP         reduce using rule 44 (arith_expression)
    ARITHEMATIC_OP_MINUS  reduce using rule 44 (arith_expression)
    $default              reduce using rule 29 (conditionals)


State 85

   46 arith_expression: arith_expression • ARITHEMATIC_OP arith_expression
   46                 | arith_expression ARITHEMATIC_OP arith_expression •  [ARITHEMATIC_OP, RELATIONAL_OP, SEMICOLON, BOOLEAN_OP, CLOSE_BRACKET, CLOSE_PARANTHESIS, DO, DOWNTO, TO, THEN]
   47                 | arith_expression • ARITHEMATIC_OP_MINUS arith_expression

    ARITHEMATIC_OP_MINUS  shift, and go to state 64

    $default  reduce using rule 46 (arith_expression)

    Conflict between rule 46 and token ARITHEMATIC_OP resolved as reduce (%left ARITHEMATIC_OP).
    Conflict between rule 46 and token ARITHEMATIC_OP_MINUS resolved as shift (ARITHEMATIC_OP < ARITHEMATIC_OP_MINUS).


State 86

   35 relational_exp: arith_expression RELATIONAL_OP arith_expression •  [BOOLEAN_OP, CLOSE_PARANTHESIS, DO, THEN]
   46 arith_expression: arith_expression • ARITHEMATIC_OP arith_expression
   47                 | arith_expression • ARITHEMATIC_OP_MINUS arith_expression

    ARITHEMATIC_OP        shift, and go to state 62
    ARITHEMATIC_OP_MINUS  shift, and go to state 64

    $default  reduce using rule 35 (relational_exp)


State 87

   46 arith_expression: arith_expression • ARITHEMATIC_OP arith_expression
   47                 | arith_expression • ARITHEMATIC_OP_MINUS arith_expression
   47                 | arith_expression ARITHEMATIC_OP_MINUS arith_expression •  [ARITHEMATIC_OP, RELATIONAL_OP, SEMICOLON, BOOLEAN_OP, CLOSE_BRACKET, CLOSE_PARANTHESIS, DO, DOWNTO, TO, THEN, ARITHEMATIC_OP_MINUS]

    $default  reduce using rule 47 (arith_expression)

    Conflict between rule 47 and token ARITHEMATIC_OP resolved as reduce (ARITHEMATIC_OP < ARITHEMATIC_OP_MINUS).
    Conflict between rule 47 and token ARITHEMATIC_OP_MINUS resolved as reduce (%left ARITHEMATIC_OP_MINUS).


State 88

   30 conditionals: unit BOOLEAN_OP conditionals •

    $default  reduce using rule 30 (conditionals)


State 89

   30 conditionals: unit • BOOLEAN_OP conditionals
   31             | unit • BOOLEAN_OP unit
   31             | unit BOOLEAN_OP unit •  [CLOSE_PARANTHESIS, DO, THEN]
   44 arith_expression: unit •  [ARITHEMATIC_OP, RELATIONAL_OP, ARITHEMATIC_OP_MINUS]

    BOOLEAN_OP  shift, and go to state 65

    ARITHEMATIC_OP        reduce using rule 44 (arith_expression)
    RELATIONAL_OP         reduce using rule 44 (arith_expression)
    ARITHEMATIC_OP_MINUS  reduce using rule 44 (arith_expression)
    $default              reduce using rule 31 (conditionals)


State 90

   22 statementline: WHILE OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS • DO program_declaration SEMICOLON

    DO  shift, and go to state 103


State 91

   25 statementline: WHILE conditionals DO program_declaration • SEMICOLON

    SEMICOLON  shift, and go to state 104


State 92

   23 statementline: FOR IDENTIFIER ASSIGNMENT_OP arith_expression • TO arith_expression DO program_declaration SEMICOLON
   24              | FOR IDENTIFIER ASSIGNMENT_OP arith_expression • DOWNTO arith_expression DO program_declaration SEMICOLON
   46 arith_expression: arith_expression • ARITHEMATIC_OP arith_expression
   47                 | arith_expression • ARITHEMATIC_OP_MINUS arith_expression

    ARITHEMATIC_OP        shift, and go to state 62
    DOWNTO                shift, and go to state 105
    TO                    shift, and go to state 106
    ARITHEMATIC_OP_MINUS  shift, and go to state 64


State 93

   41 possible_write_values: IDENTIFIER OPEN_BRACKET • arith_expression CLOSE_BRACKET
   44 arith_expression: • unit
   45                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   46                 | • arith_expression ARITHEMATIC_OP arith_expression
   47                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   48 unit: • IDENTIFIER
   49     | • CONSTANT
   50     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   51     | • ARITHEMATIC_OP_MINUS arith_expression

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 51
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    arith_expression  go to state 107
    unit              go to state 53


State 94

    7 left_side_vars: • IDENTIFIER
    8               | • IDENTIFIER COMMA left_side_vars
   38 possible_write_values: • left_side_vars
   39                      | • STRING_CONSTANT
   40                      | • STRING_CONSTANT COMMA possible_write_values
   40                      | STRING_CONSTANT COMMA • possible_write_values
   41                      | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET

    IDENTIFIER       shift, and go to state 69
    STRING_CONSTANT  shift, and go to state 70

    left_side_vars         go to state 71
    possible_write_values  go to state 108


State 95

   15 statementline: WRITE OPEN_PARANTHESIS possible_writes CLOSE_PARANTHESIS • SEMICOLON

    SEMICOLON  shift, and go to state 109


State 96

   43 possible_reads: IDENTIFIER OPEN_BRACKET • arith_expression CLOSE_BRACKET
   44 arith_expression: • unit
   45                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   46                 | • arith_expression ARITHEMATIC_OP arith_expression
   47                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   48 unit: • IDENTIFIER
   49     | • CONSTANT
   50     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   51     | • ARITHEMATIC_OP_MINUS arith_expression

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 51
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    arith_expression  go to state 110
    unit              go to state 53


State 97

   16 statementline: READ OPEN_PARANTHESIS possible_reads CLOSE_PARANTHESIS • SEMICOLON

    SEMICOLON  shift, and go to state 111


State 98

   10 rigth_side_type: ARRAY OPEN_BRACKET CONSTANT RANGE_DOTS • CONSTANT CLOSE_BRACKET OF DATATYPE

    CONSTANT  shift, and go to state 112


State 99

   50 unit: IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET •

    $default  reduce using rule 50 (unit)


State 100

   11 program_declaration: • BEGIN_TAG statements END
   12                    | • BEGIN_TAG END
   18 statementline: IF OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS THEN • program_declaration ELSE program_declaration SEMICOLON
   19              | IF OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS THEN • program_declaration SEMICOLON

    BEGIN_TAG  shift, and go to state 12

    program_declaration  go to state 113


State 101

   21 statementline: IF conditionals THEN program_declaration SEMICOLON •

    $default  reduce using rule 21 (statementline)


State 102

   11 program_declaration: • BEGIN_TAG statements END
   12                    | • BEGIN_TAG END
   20 statementline: IF conditionals THEN program_declaration ELSE • program_declaration SEMICOLON

    BEGIN_TAG  shift, and go to state 12

    program_declaration  go to state 114


State 103

   11 program_declaration: • BEGIN_TAG statements END
   12                    | • BEGIN_TAG END
   22 statementline: WHILE OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS DO • program_declaration SEMICOLON

    BEGIN_TAG  shift, and go to state 12

    program_declaration  go to state 115


State 104

   25 statementline: WHILE conditionals DO program_declaration SEMICOLON •

    $default  reduce using rule 25 (statementline)


State 105

   24 statementline: FOR IDENTIFIER ASSIGNMENT_OP arith_expression DOWNTO • arith_expression DO program_declaration SEMICOLON
   44 arith_expression: • unit
   45                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   46                 | • arith_expression ARITHEMATIC_OP arith_expression
   47                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   48 unit: • IDENTIFIER
   49     | • CONSTANT
   50     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   51     | • ARITHEMATIC_OP_MINUS arith_expression

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 51
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    arith_expression  go to state 116
    unit              go to state 53


State 106

   23 statementline: FOR IDENTIFIER ASSIGNMENT_OP arith_expression TO • arith_expression DO program_declaration SEMICOLON
   44 arith_expression: • unit
   45                 | • OPEN_PARANTHESIS arith_expression CLOSE_PARANTHESIS
   46                 | • arith_expression ARITHEMATIC_OP arith_expression
   47                 | • arith_expression ARITHEMATIC_OP_MINUS arith_expression
   48 unit: • IDENTIFIER
   49     | • CONSTANT
   50     | • IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET
   51     | • ARITHEMATIC_OP_MINUS arith_expression

    IDENTIFIER            shift, and go to state 32
    CONSTANT              shift, and go to state 33
    OPEN_PARANTHESIS      shift, and go to state 51
    ARITHEMATIC_OP_MINUS  shift, and go to state 36

    arith_expression  go to state 117
    unit              go to state 53


State 107

   41 possible_write_values: IDENTIFIER OPEN_BRACKET arith_expression • CLOSE_BRACKET
   46 arith_expression: arith_expression • ARITHEMATIC_OP arith_expression
   47                 | arith_expression • ARITHEMATIC_OP_MINUS arith_expression

    ARITHEMATIC_OP        shift, and go to state 62
    CLOSE_BRACKET         shift, and go to state 118
    ARITHEMATIC_OP_MINUS  shift, and go to state 64


State 108

   40 possible_write_values: STRING_CONSTANT COMMA possible_write_values •

    $default  reduce using rule 40 (possible_write_values)


State 109

   15 statementline: WRITE OPEN_PARANTHESIS possible_writes CLOSE_PARANTHESIS SEMICOLON •

    $default  reduce using rule 15 (statementline)


State 110

   43 possible_reads: IDENTIFIER OPEN_BRACKET arith_expression • CLOSE_BRACKET
   46 arith_expression: arith_expression • ARITHEMATIC_OP arith_expression
   47                 | arith_expression • ARITHEMATIC_OP_MINUS arith_expression

    ARITHEMATIC_OP        shift, and go to state 62
    CLOSE_BRACKET         shift, and go to state 119
    ARITHEMATIC_OP_MINUS  shift, and go to state 64


State 111

   16 statementline: READ OPEN_PARANTHESIS possible_reads CLOSE_PARANTHESIS SEMICOLON •

    $default  reduce using rule 16 (statementline)


State 112

   10 rigth_side_type: ARRAY OPEN_BRACKET CONSTANT RANGE_DOTS CONSTANT • CLOSE_BRACKET OF DATATYPE

    CLOSE_BRACKET  shift, and go to state 120


State 113

   18 statementline: IF OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS THEN program_declaration • ELSE program_declaration SEMICOLON
   19              | IF OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS THEN program_declaration • SEMICOLON

    SEMICOLON  shift, and go to state 121
    ELSE       shift, and go to state 122


State 114

   20 statementline: IF conditionals THEN program_declaration ELSE program_declaration • SEMICOLON

    SEMICOLON  shift, and go to state 123


State 115

   22 statementline: WHILE OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS DO program_declaration • SEMICOLON

    SEMICOLON  shift, and go to state 124


State 116

   24 statementline: FOR IDENTIFIER ASSIGNMENT_OP arith_expression DOWNTO arith_expression • DO program_declaration SEMICOLON
   46 arith_expression: arith_expression • ARITHEMATIC_OP arith_expression
   47                 | arith_expression • ARITHEMATIC_OP_MINUS arith_expression

    ARITHEMATIC_OP        shift, and go to state 62
    DO                    shift, and go to state 125
    ARITHEMATIC_OP_MINUS  shift, and go to state 64


State 117

   23 statementline: FOR IDENTIFIER ASSIGNMENT_OP arith_expression TO arith_expression • DO program_declaration SEMICOLON
   46 arith_expression: arith_expression • ARITHEMATIC_OP arith_expression
   47                 | arith_expression • ARITHEMATIC_OP_MINUS arith_expression

    ARITHEMATIC_OP        shift, and go to state 62
    DO                    shift, and go to state 126
    ARITHEMATIC_OP_MINUS  shift, and go to state 64


State 118

   41 possible_write_values: IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET •

    $default  reduce using rule 41 (possible_write_values)


State 119

   43 possible_reads: IDENTIFIER OPEN_BRACKET arith_expression CLOSE_BRACKET •

    $default  reduce using rule 43 (possible_reads)


State 120

   10 rigth_side_type: ARRAY OPEN_BRACKET CONSTANT RANGE_DOTS CONSTANT CLOSE_BRACKET • OF DATATYPE

    OF  shift, and go to state 127


State 121

   19 statementline: IF OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS THEN program_declaration SEMICOLON •

    $default  reduce using rule 19 (statementline)


State 122

   11 program_declaration: • BEGIN_TAG statements END
   12                    | • BEGIN_TAG END
   18 statementline: IF OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS THEN program_declaration ELSE • program_declaration SEMICOLON

    BEGIN_TAG  shift, and go to state 12

    program_declaration  go to state 128


State 123

   20 statementline: IF conditionals THEN program_declaration ELSE program_declaration SEMICOLON •

    $default  reduce using rule 20 (statementline)


State 124

   22 statementline: WHILE OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS DO program_declaration SEMICOLON •

    $default  reduce using rule 22 (statementline)


State 125

   11 program_declaration: • BEGIN_TAG statements END
   12                    | • BEGIN_TAG END
   24 statementline: FOR IDENTIFIER ASSIGNMENT_OP arith_expression DOWNTO arith_expression DO • program_declaration SEMICOLON

    BEGIN_TAG  shift, and go to state 12

    program_declaration  go to state 129


State 126

   11 program_declaration: • BEGIN_TAG statements END
   12                    | • BEGIN_TAG END
   23 statementline: FOR IDENTIFIER ASSIGNMENT_OP arith_expression TO arith_expression DO • program_declaration SEMICOLON

    BEGIN_TAG  shift, and go to state 12

    program_declaration  go to state 130


State 127

   10 rigth_side_type: ARRAY OPEN_BRACKET CONSTANT RANGE_DOTS CONSTANT CLOSE_BRACKET OF • DATATYPE

    DATATYPE  shift, and go to state 131


State 128

   18 statementline: IF OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS THEN program_declaration ELSE program_declaration • SEMICOLON

    SEMICOLON  shift, and go to state 132


State 129

   24 statementline: FOR IDENTIFIER ASSIGNMENT_OP arith_expression DOWNTO arith_expression DO program_declaration • SEMICOLON

    SEMICOLON  shift, and go to state 133


State 130

   23 statementline: FOR IDENTIFIER ASSIGNMENT_OP arith_expression TO arith_expression DO program_declaration • SEMICOLON

    SEMICOLON  shift, and go to state 134


State 131

   10 rigth_side_type: ARRAY OPEN_BRACKET CONSTANT RANGE_DOTS CONSTANT CLOSE_BRACKET OF DATATYPE •

    $default  reduce using rule 10 (rigth_side_type)


State 132

   18 statementline: IF OPEN_PARANTHESIS conditionals CLOSE_PARANTHESIS THEN program_declaration ELSE program_declaration SEMICOLON •

    $default  reduce using rule 18 (statementline)


State 133

   24 statementline: FOR IDENTIFIER ASSIGNMENT_OP arith_expression DOWNTO arith_expression DO program_declaration SEMICOLON •

    $default  reduce using rule 24 (statementline)


State 134

   23 statementline: FOR IDENTIFIER ASSIGNMENT_OP arith_expression TO arith_expression DO program_declaration SEMICOLON •

    $default  reduce using rule 23 (statementline)
